usethis::use_gpl3_license()
usethis::use_gpl3_license("Pol Castellano-Escuder")
usethis::use_appveyor()
usethis::use_readme_rmd()
usethis::use_travis()
usethis::use_lifecycle_badge("experimental")
usethis::use_lifecycle_badge("experimental")
usethis::use_coverage()
usethis::use_github_action_check_full()
usethis::use_github_actions_badge()
usethis::use_testthat()
use√ß
usethis::use_readme_md()
usethis::use_code_of_conduct()
usethis::use_r("blasso")
usethis::use_test()
foreach::%dopar%
?glmnet::cv.glmnet
x = matrix(rnorm(1e+05 * 100), 1e+05, 100)
y = rnorm(1e+05)
system.time(cv.glmnet(x, y))
system.time(cv.glmnet(x, y, parallel = TRUE))
library(glmnet)
x = matrix(rnorm(1e+05 * 100), 1e+05, 100)
y = rnorm(1e+05)
system.time(cv.glmnet(x, y))
system.time(cv.glmnet(x, y, parallel = TRUE))
cv.glmnet(x, y, parallel = TRUE)
?glmnet
lambda = NULL
nfolds = 10
cv_fit <- glmnet::cv.glmnet(x, y, family = "gaussian", nfolds = nfolds, lambda = lambda)
unlist(cv_fit)
broom::tidy(cv_fit)
broom::glance(cv_fit)
tmp_coeffs <- coef(cv_fit, s = "lambda.min")
final_coef <- data.frame(name = tmp_coeffs@Dimnames[[1]][tmp_coeffs@i + 1], coefficient = tmp_coeffs@x)
View(final_coef)
x = matrix(rnorm(1e+05 * 100), 1e+05, 100)
y = rnorm(1e+05)
idx <- sample(1:n, replace = T)
varx <- colnames(x)
rowx <- nrow(x)
nvar <- ncol(x)
n <- length(y)
idx <- sample(1:n, replace = T)
idx
new_x <- x[idx,]
new_y <- y[idx]
new_matrix <- cbind(y, x)
ids_test <- sample(1:(n/3), replace = FALSE)
33333*3
idx_test <- sample(1:(n/3), replace = FALSE)
family = "multinomial"
x = iris[,1:4]
y = iris[,5]
varx <- colnames(x)
rowx <- nrow(x)
nvar <- ncol(x)
n <- length(y)
idx <- sample(1:n, replace = T)
new_matrix <- cbind(y, x)
new_matrix <- new_matrix[idx ,]
View(new_matrix)
idx_test <- sample(1:(n/3), replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
View(test_x)
test_y
x = iris[,1:4]
y = iris[,5]
varx <- colnames(x)
rowx <- nrow(x)
nvar <- ncol(x)
n <- length(y)
idx <- sample(1:n, replace = T)
new_matrix <- cbind(y, x)
new_matrix <- new_matrix[idx ,]
idx_test <- sample(1:(n/3), replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
train <- new_matrix[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
family
family <- "multinomial"
x = iris[,1:4]
y = iris[,5]
varx <- colnames(x)
rowx <- nrow(x)
nvar <- ncol(x)
n <- length(y)
idx <- sample(1:n, replace = T)
new_matrix <- cbind(y, x)
new_matrix <- new_matrix[idx ,]
idx_test <- sample(1:(n/3), replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
train <- new_matrix[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
lambda = NULL
nfolds = 10
cv_fit <- glmnet::cv.glmnet(train_x, train_y, family = family, nfolds = nfolds, lambda = lambda, parallel = TRUE)
train_x
train_y
class(train_x)
class(train_y)
class(test_y)
lambda
cv_fit <- glmnet::cv.glmnet(train_x, train_y, family = family, nfolds = nfolds, lambda = lambda, parallel = TRUE)
cv_fit <- glmnet::cv.glmnet(as.matrix(train_x), train_y, family = family, nfolds = nfolds, lambda = lambda, parallel = TRUE)
cv_fit
lasso_pred <- predict(cv_fit, s = cv_fit$lambda.min, newx = test_x)
lasso_pred <- glmnet::predict(cv_fit, s = cv_fit$lambda.min, newx = test_x)
library(glmnet)
library(MASS)
lasso_pred <- predict(cv_fit, s = cv_fit$lambda.min, newx = test_x)
?predict
lasso_pred <- predict(cv_fit, new_data = test_x)
lasso_pred <- predict(cv_fit, newx = test_x)
lasso_pred <- predict(cv_fit, s = cv_fit$lambda.min, newx = as.matrix(test_x))
lasso_pred
mse <- mean((test_y - lasso_pred)^2)
mse
test_y - lasso_pred
x = iris[,1:3]
y = iris[,4]
varx <- colnames(x)
rowx <- nrow(x)
nvar <- ncol(x)
n <- length(y)
res <- vector("list", loops)
idx <- sample(1:n, replace = T)
new_matrix <- cbind(y, x)
new_matrix <- new_matrix[idx ,]
idx_test <- sample(1:(n/3), replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
train <- new_matrix[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
cv_fit <- glmnet::cv.glmnet(as.matrix(train_x), train_y, family = family, nfolds = nfolds, lambda = lambda, parallel = TRUE)
familt <- "gaussian"
cv_fit <- glmnet::cv.glmnet(as.matrix(train_x), train_y, family = family, nfolds = nfolds, lambda = lambda, parallel = TRUE)
install.packages("lasso2")
mse(cv_fit$lambda.min, test_y)
lasso2::mse(cv_fit$lambda.min, test_y)
lasso_pred <- predict(cv_fit, s = cv_fit$lambda.min, newx = as.matrix(test_x))
lasso_pred
y
x = iris[,1:3]
y = iris[,4]
varx <- colnames(x)
rowx <- nrow(x)
nvar <- ncol(x)
n <- length(y)
res <- vector("list", loops)
idx <- sample(1:n, replace = T)
new_matrix <- cbind(y, x)
new_matrix <- new_matrix[idx ,]
idx_test <- sample(1:(n/3), replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
train <- new_matrix[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
cv_fit <- glmnet::cv.glmnet(as.matrix(train_x), train_y, family = family, nfolds = nfolds, lambda = lambda, parallel = TRUE)
train_y
class(train_y)
family
family <- "gaussian"
cv_fit <- glmnet::cv.glmnet(as.matrix(train_x), train_y, family = family, nfolds = nfolds, lambda = lambda, parallel = TRUE)
lasso_pred <- predict(cv_fit, s = cv_fit$lambda.min, newx = as.matrix(test_x))
mse <- mean((test_y - lasso_pred)^2)
mse
x = iris[,1:3]
y = iris[,4]
blasso <- function(x, y, loops = 2, nfolds = 10, family = "gaussian", lambda = NULL, seed = 987654321, ncores = 2){
doParallel::registerDoParallel(cores = ncores)
set.seed(seed)
varx <- colnames(x)
rowx <- nrow(x)
nvar <- ncol(x)
n <- length(y)
res <- vector("list", loops)
if(rowx != n){
stop("The number of rows in x is not equal to the length of y!")
}
res <- foreach::foreach(i = 1:loops) %dopar% {
## BOOTSTRAP
idx <- sample(1:n, replace = T)
new_matrix <- cbind(y, x)
new_matrix <- new_matrix[idx ,]
## TEST
idx_test <- sample(1:(n/3), replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
## TRAIN
train <- new_matrix[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
## LASSO
cv_fit <- glmnet::cv.glmnet(as.matrix(train_x), train_y, family = family, nfolds = nfolds, lambda = lambda, parallel = TRUE)
tmp_coeffs <- coef(cv_fit, s = "lambda.min")
final_coef <- data.frame(name = tmp_coeffs@Dimnames[[1]][tmp_coeffs@i + 1], coefficient = tmp_coeffs@x)
lasso_pred <- predict(cv_fit, s = cv_fit$lambda.min, newx = as.matrix(test_x))
mse <- mean((test_y - lasso_pred)^2)
res[[i]] <- list(final_coef, mse)
}
# message(crayon::blue(clisymbols::symbol$info, paste0("Work done in ", round(end_time - start_time, 2))))
return(res)
}
blaso(x,y)
blasso(x,y)
library(foreach)
blasso(x,y)
blasso <- function(x, y, loops = 2, nfolds = 10, family = "gaussian", lambda = NULL, seed = 987654321, ncores = 2){
doParallel::registerDoParallel(cores = ncores)
set.seed(seed)
varx <- colnames(x)
rowx <- nrow(x)
nvar <- ncol(x)
n <- length(y)
res <- vector("list", loops)
if(rowx != n){
stop("The number of rows in x is not equal to the length of y!")
}
res <- foreach::foreach(i = 1:loops) %dopar% {
## BOOTSTRAP
idx <- sample(1:n, replace = T)
new_matrix <- cbind(y, x)
new_matrix <- new_matrix[idx ,]
## TEST
idx_test <- sample(1:(n/3), replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
## TRAIN
train <- new_matrix[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
## LASSO
cv_fit <- glmnet::cv.glmnet(as.matrix(train_x), train_y, family = family, nfolds = nfolds, lambda = lambda, parallel = TRUE)
tmp_coeffs <- coef(cv_fit, s = "lambda.min")
final_coef <- data.frame(name = tmp_coeffs@Dimnames[[1]][tmp_coeffs@i + 1], coefficient = tmp_coeffs@x)
lasso_pred <- predict(cv_fit, s = cv_fit$lambda.min, newx = as.matrix(test_x))
mse <- mean((test_y - lasso_pred)^2)
res[i] <- list(final_coef, mse)
}
# message(crayon::blue(clisymbols::symbol$info, paste0("Work done in ", round(end_time - start_time, 2))))
return(res)
}
blasso(x,y)
blasso <- function(x, y, loops = 2, nfolds = 10, family = "gaussian", lambda = NULL, seed = 987654321, ncores = 2){
doParallel::registerDoParallel(cores = ncores)
set.seed(seed)
varx <- colnames(x)
rowx <- nrow(x)
nvar <- ncol(x)
n <- length(y)
res <- vector("list", loops)
if(rowx != n){
stop("The number of rows in x is not equal to the length of y!")
}
res <- foreach::foreach(i = 1:loops) %dopar% {
## BOOTSTRAP
idx <- sample(1:n, replace = T)
new_matrix <- cbind(y, x)
new_matrix <- new_matrix[idx ,]
## TEST
idx_test <- sample(1:(n/3), replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
## TRAIN
train <- new_matrix[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
## LASSO
cv_fit <- glmnet::cv.glmnet(as.matrix(train_x), train_y, family = family, nfolds = nfolds, lambda = lambda, parallel = TRUE)
tmp_coeffs <- coef(cv_fit, s = "lambda.min")
final_coef <- data.frame(name = tmp_coeffs@Dimnames[[1]][tmp_coeffs@i + 1], coefficient = tmp_coeffs@x)
lasso_pred <- predict(cv_fit, s = cv_fit$lambda.min, newx = as.matrix(test_x))
mse <- mean((test_y - lasso_pred)^2)
res[i] <- list(coeffs = final_coef, mse = mse)
}
# message(crayon::blue(clisymbols::symbol$info, paste0("Work done in ", round(end_time - start_time, 2))))
return(res)
}
blasso(x,y)
blasso <- function(x, y, loops = 2, nfolds = 10, family = "gaussian", lambda = NULL, seed = 987654321, ncores = 2){
tictoc::tic("blasso")
doParallel::registerDoParallel(cores = ncores)
set.seed(seed)
varx <- colnames(x)
rowx <- nrow(x)
nvar <- ncol(x)
n <- length(y)
res <- vector("list", loops)
if(rowx != n){
stop("The number of rows in x is not equal to the length of y!")
}
res <- foreach::foreach(i = 1:loops) %dopar% {
## BOOTSTRAP
idx <- sample(1:n, replace = T)
new_matrix <- cbind(y, x)
new_matrix <- new_matrix[idx ,]
## TEST
idx_test <- sample(1:(n/3), replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
## TRAIN
train <- new_matrix[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
## LASSO
cv_fit <- glmnet::cv.glmnet(as.matrix(train_x), train_y, family = family, nfolds = nfolds, lambda = lambda, parallel = TRUE)
tmp_coeffs <- coef(cv_fit, s = "lambda.min")
final_coef <- data.frame(name = tmp_coeffs@Dimnames[[1]][tmp_coeffs@i + 1], coefficient = tmp_coeffs@x)
lasso_pred <- predict(cv_fit, s = cv_fit$lambda.min, newx = as.matrix(test_x))
mse <- mean((test_y - lasso_pred)^2)
res[i] <- list(coeffs = final_coef, mse = mse)
}
# message(crayon::blue(clisymbols::symbol$info, paste0("Work done in ", round(end_time - start_time, 2))))
tictoc::toc()
return(res)
}
blasso(x,y)
aaa <- blasso(x,y)
blasso <- function(x, y, loops = 2, nfolds = 10, family = "gaussian", lambda = NULL, seed = 987654321, ncores = 2){
tictoc::tic()
doParallel::registerDoParallel(cores = ncores)
set.seed(seed)
varx <- colnames(x)
rowx <- nrow(x)
nvar <- ncol(x)
n <- length(y)
res <- vector("list", loops)
if(rowx != n){
stop("The number of rows in x is not equal to the length of y!")
}
res <- foreach::foreach(i = 1:loops) %dopar% {
## BOOTSTRAP
idx <- sample(1:n, replace = T)
new_matrix <- cbind(y, x)
new_matrix <- new_matrix[idx ,]
## TEST
idx_test <- sample(1:(n/3), replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
## TRAIN
train <- new_matrix[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
## LASSO
cv_fit <- glmnet::cv.glmnet(as.matrix(train_x), train_y, family = family, nfolds = nfolds, lambda = lambda, parallel = TRUE)
tmp_coeffs <- coef(cv_fit, s = "lambda.min")
final_coef <- data.frame(name = tmp_coeffs@Dimnames[[1]][tmp_coeffs@i + 1], coefficient = tmp_coeffs@x)
lasso_pred <- predict(cv_fit, s = cv_fit$lambda.min, newx = as.matrix(test_x))
mse <- mean((test_y - lasso_pred)^2)
res[i] <- list(coeffs = final_coef, mse = mse)
}
# message(crayon::blue(clisymbols::symbol$info, paste0("Work done in ", round(end_time - start_time, 2))))
tictoc::toc()
return(res)
}
aaa <- blasso(x,y)
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
pkgdown::build_site()
