## TEST
idx_test <- sample(1:n, 0.2*n, replace = FALSE)
test <- x[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
## TRAIN
train <- x[-idx_test ,]
View(train)
library(tidyverse)
# binomial
data(BreastCancer, package = "mlbench")
bc <- BreastCancer[complete.cases(BreastCancer), ]  # create copy
bc <- bc %>% select(-1) %>% mutate(Class = ifelse(Class == "benign", 1, 0))
x <- bc[,1:9]
y <- as.factor(bc$Class)
n <- length(y)
new_matrix <- cbind(y, x)
## TEST
idx_test <- sample(1:n, 0.2*n, replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
## TRAIN
train <- new_matrix[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
train_y
test_y
model <- cv.glmnet(data.matrix(train_x), as.matrix(train_y), family = "binomial", parallel = TRUE)
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(test_x), type = "class")
caret::confusionMatrix(as.factor(lasso_pred), as.factor(test_y))$overall[1]
bin_mod <- binom_blasso(train_x, train_y, loops = 10, bootstrap = TRUE, ncores = 4)
model <- pick_best(bin_mod)$model
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(test_x), type = "class")
caret::confusionMatrix(as.factor(lasso_pred), as.factor(test_y))$overall[1]
binom_blasso(train_x, train_y, loops = 10, bootstrap = TRUE, ncores = 4, smote = T)
train_x
train_y
load("~/Dropbox/BclogitLasso/data/cleanData/IQRx1_5/Bordeaux_Clean_IQRx1_5.RData")
y <- as.factor(target$target)
y
library(tidyverse)
# binomial
load("~/Dropbox/BclogitLasso/data/cleanData/IQRx1_5/Bordeaux_Clean_IQRx1_5.RData")
x <- metabolites
y <- as.factor(target$target)
##
n <- length(y)
new_matrix <- cbind(y, x)
## TEST
idx_test <- sample(1:n, 0.2*n, replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
## TRAIN
train <- new_matrix[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
train_y
test_y
model <- cv.glmnet(data.matrix(train_x), as.matrix(train_y), family = "binomial", parallel = TRUE)
# binomial
load("~/Dropbox/BclogitLasso/data/cleanData/IQRx1_5/Bordeaux_Clean_IQRx1_5.RData")
x <- data.frame(apply(metabolites, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- as.factor(target$target)
n <- length(y)
new_matrix <- cbind(y, x)
idx_test <- sample(1:n, 0.2*n, replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
train <- new_matrix[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
model <- cv.glmnet(data.matrix(train_x), as.matrix(train_y), family = "binomial", parallel = TRUE)
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(test_x), type = "class")
caret::confusionMatrix(as.factor(lasso_pred), as.factor(test_y))$overall[1]
devtools::load_all()
devtools::document()
library(tidyverse)
# binomial
load("~/Dropbox/BclogitLasso/data/cleanData/IQRx1_5/Bordeaux_Clean_IQRx1_5.RData")
x <- data.frame(apply(metabolites, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- as.factor(target$target)
##
n <- length(y)
new_matrix <- cbind(y, x)
## TEST
idx_test <- sample(1:n, 0.2*n, replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
## TRAIN
train <- new_matrix[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
train_x <- train_x %>% mutate_all(as.numeric)
model <- randomForest::randomForest(train_x, as.factor(train_y))
rf_pred <- predict(model, newx = test_x, type = "class")
caret::confusionMatrix(as.factor(rf_pred), as.factor(test_y))$overall[1]
train_x <- train_x %>% mutate_all(as.numeric)
test_x <- test_x %>% mutate_all(as.numeric)
model <- randomForest::randomForest(train_x, as.factor(train_y))
rf_pred <- predict(model, newx = test_x, type = "class")
caret::confusionMatrix(as.factor(rf_pred), as.factor(test_y))$overall[1]
rf_pred <- predict(model, newdata = test_x, type = "class")
caret::confusionMatrix(as.factor(rf_pred), as.factor(test_y))$overall[1]
as.factor(test_y)
library(tidyverse)
# binomial
load("~/Dropbox/BclogitLasso/data/cleanData/IQRx1_5/Bordeaux_Clean_IQRx1_5.RData")
x <- data.frame(apply(metabolites, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- as.factor(target$target)
##
n <- length(y)
new_matrix <- cbind(y, x)
## TEST
idx_test <- sample(1:n, 0.2*n, replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
## TRAIN
train <- new_matrix[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
###########################
###########################
###########################
## SIMULATION
# raw cv.glmnet
test_list <- list()
for (i in 1:20){
model <- cv.glmnet(data.matrix(train_x), as.matrix(train_y), family = "binomial", parallel = TRUE)
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(test_x), type = "class")
test_list[i] <- caret::confusionMatrix(as.factor(lasso_pred), as.factor(test_y))$overall[1]
}
# without bootstrap
test_list2 <- list()
for (i in 1:20){
bin_mod <- binom_blasso(train_x, train_y, loops = 100, bootstrap = FALSE, ncores = 4)
model <- pick_best(bin_mod)$model
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(test_x), type = "class")
test_list2[i] <- caret::confusionMatrix(as.factor(lasso_pred), as.factor(test_y))$overall[1]
}
# bootstrap and internal train/test
test_list3 <- list()
for (i in 1:20){
bin_mod <- binom_blasso(train_x, train_y, loops = 100, bootstrap = TRUE, ncores = 4)
model <- pick_best(bin_mod)$model
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(test_x), type = "class")
test_list3[i] <- caret::confusionMatrix(as.factor(lasso_pred), as.factor(test_y))$overall[1]
}
# randomForest
test_list4 <- list()
for (i in 1:20){
train_x <- train_x %>% mutate_all(as.numeric)
test_x <- test_x %>% mutate_all(as.numeric)
model <- randomForest::randomForest(train_x, as.factor(train_y))
rf_pred <- predict(model, newdata = test_x, type = "class")
test_list4[i] <- caret::confusionMatrix(as.factor(rf_pred), as.factor(test_y))$overall[1]
}
##
results <- data.frame(raw_glmnet = unlist(test_list),
wo_bootstrap = unlist(test_list2),
bootstrap = unlist(test_list3),
randomForest = unlist(test_list4))
# save(results, file = "/home/pol/Escritorio/2_simulation_lassoloops.Rdata")
##
melt_res <- reshape2::melt(results)
ggplot(melt_res) +
geom_boxplot(aes(variable, value, fill = variable)) +
geom_hline(yintercept = max(results), linetype = "dashed") +
geom_jitter(aes(variable, value, fill = variable)) +
theme_bw()
library(tidyverse)
# binomial
load("~/Dropbox/BclogitLasso/data/cleanData/IQRx1_5/Bordeaux_Clean_IQRx1_5.RData")
x <- data.frame(apply(metabolites, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- as.factor(target$target)
##
n <- length(y)
new_matrix <- cbind(y, x)
## TEST
idx_test <- sample(1:n, 0.2*n, replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
## TRAIN
train <- new_matrix[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
###########################
###########################
###########################
## SIMULATION
# raw cv.glmnet
test_list <- list()
for (i in 1:10){
model <- cv.glmnet(data.matrix(train_x), as.matrix(train_y), family = "binomial", parallel = TRUE)
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(test_x), type = "class")
test_list[i] <- caret::confusionMatrix(as.factor(lasso_pred), as.factor(test_y))$overall[1]
}
# without bootstrap
test_list2 <- list()
for (i in 1:10){
bin_mod <- binom_blasso(train_x, train_y, loops = 50, bootstrap = FALSE, ncores = 4)
model <- pick_best(bin_mod)$model
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(test_x), type = "class")
test_list2[i] <- caret::confusionMatrix(as.factor(lasso_pred), as.factor(test_y))$overall[1]
}
# bootstrap and internal train/test
test_list3 <- list()
for (i in 1:10){
bin_mod <- binom_blasso(train_x, train_y, loops = 50, bootstrap = TRUE, ncores = 4)
model <- pick_best(bin_mod)$model
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(test_x), type = "class")
test_list3[i] <- caret::confusionMatrix(as.factor(lasso_pred), as.factor(test_y))$overall[1]
}
# randomForest
test_list4 <- list()
for (i in 1:10){
train_x <- train_x %>% mutate_all(as.numeric)
test_x <- test_x %>% mutate_all(as.numeric)
model <- randomForest::randomForest(train_x, as.factor(train_y))
rf_pred <- predict(model, newdata = test_x, type = "class")
test_list4[i] <- caret::confusionMatrix(as.factor(rf_pred), as.factor(test_y))$overall[1]
}
##
results <- data.frame(raw_glmnet = unlist(test_list),
wo_bootstrap = unlist(test_list2),
bootstrap = unlist(test_list3),
randomForest = unlist(test_list4))
# save(results, file = "/home/pol/Escritorio/2_simulation_lassoloops.Rdata")
##
melt_res <- reshape2::melt(results)
ggplot(melt_res) +
geom_boxplot(aes(variable, value, fill = variable)) +
geom_hline(yintercept = max(results), linetype = "dashed") +
geom_jitter(aes(variable, value, fill = variable)) +
theme_bw()
save(results, file = "/Users/pol/Desktop/3_simulation_lassoloops.Rdata")
results <- data.frame(raw_glmnet = unlist(test_list),
No_bootstrap = unlist(test_list2),
Bootstrap = unlist(test_list3),
RandomForest = unlist(test_list4))
melt_res <- reshape2::melt(results)
ggplot(melt_res) +
geom_boxplot(aes(variable, value, fill = variable)) +
geom_hline(yintercept = max(results), linetype = "dashed") +
geom_jitter(aes(variable, value, fill = variable)) +
theme_bw()
save(results, file = "/Users/pol/Desktop/3_simulation_lassoloops.Rdata")
ggplot(melt_res) +
geom_boxplot(aes(variable, value, fill = variable)) +
geom_hline(yintercept = max(results), linetype = "dashed") +
geom_jitter(aes(variable, value, fill = variable)) +
theme_bw() +
xlab("")
ggplot(melt_res) +
geom_boxplot(aes(variable, value, fill = variable)) +
geom_hline(yintercept = max(results), linetype = "dashed") +
geom_jitter(aes(variable, value, fill = variable)) +
theme_bw() +
xlab("") +
ylab("Accuracy")
View(results)
load("~/Desktop/3_simulation_lassoloops.Rdata")
View(results)
melt_res <- reshape2::melt(results)
ggplot(melt_res) +
geom_boxplot(aes(variable, value, fill = variable)) +
geom_hline(yintercept = max(results), linetype = "dashed") +
geom_jitter(aes(variable, value, fill = variable)) +
theme_bw() +
xlab("") +
ylab("Accuracy")
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
pkgdown::build_site()
version
usethis::use_test("binom_blasso")
devtools::check()
data <- survival::cancer
usethis::use_data(data)
usethis::use_data(data, file = "survival_cancer.Rdata")
usethis::use_data(data, "survival_cancer.Rdata")
?usethis::use_data
survival_cancer <- survival::cancer
usethis::use_data(survival_cancer)
usethis::use_r("data")
?survival::cancer
survival_cancer
data("survival_cancer")
x <- survival_cancer[,4:10]
x <- data.frame(apply(x, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- survival_cancer[,2:3] %>% mutate(status = ifelse(status == 2,1,0))
cox_mod <- cox_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
cox_mod_wo_bootstrap <- cox_blasso(x, y, loops = 10, bootstrap = FALSE, ncores = 1)
cox_mod
data("survival_cancer")
x <- survival_cancer[,4:10]
x <- data.frame(apply(x, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- survival_cancer[,2:3] %>% mutate(status = ifelse(status == 2,1,0))
error_x <- x[1:10,]
error_y <- y[,1]
cox_mod <- cox_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
cox_mod_wo_bootstrap <- cox_blasso(x, y, loops = 10, bootstrap = FALSE, ncores = 1)
expect_error(cox_blasso(error_x, y, loops = 10, bootstrap = TRUE, ncores = 1))
library(testthat)
expect_error(cox_blasso(error_x, y, loops = 10, bootstrap = TRUE, ncores = 1))
expect_error(cox_blasso(x, error_y, loops = 10, bootstrap = TRUE, ncores = 1))
class(cox_mod)
expect_true(class(cox_mod) == "LassoLoop")
expect_true(class(cox_mod_wo_bootstrap) == "LassoLoop")
data("survival_cancer")
x <- survival_cancer[,4:10]
x <- data.frame(apply(x, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- survival_cancer[,2:3] %>% mutate(status = ifelse(status == 2,1,0))
error_x <- x[1:10,]
error_y <- y[,1]
cox_mod <- cox_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
cox_mod_wo_bootstrap <- cox_blasso(x, y, loops = 8, bootstrap = FALSE, ncores = 1)
expect_true(class(cox_mod) == "LassoLoop")
expect_true(class(cox_mod_wo_bootstrap) == "LassoLoop")
expect_true(cox_mod@bootstraped)
expect_false(cox_mod_wo_bootstrap@bootstraped)
expect_true(cox_mod@family == "cox")
expect_true(cox_mod_wo_bootstrap@family == "cox")
expect_true(cox_mod@length == 10)
expect_true(cox_mod_wo_bootstrap@length == 8)
expect_error(cox_blasso(error_x, y, loops = 10, bootstrap = TRUE, ncores = 1))
expect_error(cox_blasso(x, error_y, loops = 10, bootstrap = TRUE, ncores = 1))
mtcars
x <- mtcars[,1:6]
y <- mtcars$qsec
View(x)
y
x <- mtcars[,1:6]
y <- mtcars$qsec
error_x <- x[1:5,]
error_y <- mtcars[,6:7]
blasso_mod <- blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
blasso_mod_wo_bootstrap <- blasso(x, y, loops = 8, bootstrap = FALSE, ncores = 1)
expect_true(class(blasso_mod) == "LassoLoop")
expect_true(class(blasso_mod_wo_bootstrap) == "LassoLoop")
expect_true(blasso_mod@bootstraped)
expect_false(blasso_mod_wo_bootstrap@bootstraped)
expect_true(blasso_mod@family == "cox")
expect_true(blasso_mod_wo_bootstrap@family == "cox")
expect_true(blasso_mod@length == 10)
expect_true(blasso_mod_wo_bootstrap@length == 8)
expect_error(blasso(error_x, y, loops = 10, bootstrap = TRUE, ncores = 1))
expect_error(blasso(x, error_y, loops = 10, bootstrap = TRUE, ncores = 1))
blasso_mod@family
expect_false(blasso_mod@family == "cox")
expect_false(blasso_mod_wo_bootstrap@family == "cox")
mtcars
x <- mtcars[,1:7]
y <- mtcars$vs
error_x <- x[1:5,]
error_y <- mtcars[,8:9]
binom_blasso_mod <- binom_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
binom_blasso_mod_wo_bootstrap <- binom_blasso(x, y, loops = 8, bootstrap = FALSE, ncores = 1)
expect_true(class(binom_blasso_mod) == "LassoLoop")
expect_true(class(binom_blasso_mod_wo_bootstrap) == "LassoLoop")
expect_true(binom_blasso_mod@bootstraped)
expect_false(binom_blasso_mod_wo_bootstrap@bootstraped)
expect_true(binom_blasso_mod@family == "binomial")
expect_true(binom_blasso_mod_wo_bootstrap@family == "binomial")
expect_false(binom_blasso_mod@family == "cox")
expect_false(binom_blasso_mod_wo_bootstrap@family == "cox")
expect_true(binom_blasso_mod@length == 10)
expect_true(binom_blasso_mod_wo_bootstrap@length == 8)
expect_error(binom_blasso(error_x, y, loops = 10, bootstrap = TRUE, ncores = 1))
expect_error(binom_blasso(x, error_y, loops = 10, bootstrap = TRUE, ncores = 1))
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
covr::package_coverage()
expect_error(binom_blasso(error_x, y, loops = 10, bootstrap = TRUE, ncores = 1, smote = TRUE))
expect_error(binom_blasso(x, error_y, loops = 10, bootstrap = TRUE, ncores = 1, smote = TRUE))
s_binom_blasso_mod <- binom_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1, smote = TRUE)
x <- mtcars[,1:7]
y <- mtcars$vs
error_x <- x[1:5,]
error_y <- mtcars[,8:9]
binom_blasso_mod <- binom_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
binom_blasso_mod_wo_bootstrap <- binom_blasso(x, y, loops = 8, bootstrap = FALSE, ncores = 1)
s_binom_blasso_mod <- binom_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1, smote = TRUE)
s_binom_blasso_mod_wo_bootstrap <- binom_blasso(x, y, loops = 8, bootstrap = FALSE, ncores = 1, smote = TRUE)
expect_true(class(binom_blasso_mod) == "LassoLoop")
expect_true(class(binom_blasso_mod_wo_bootstrap) == "LassoLoop")
expect_true(class(s_binom_blasso_mod) == "LassoLoop")
expect_true(class(s_binom_blasso_mod_wo_bootstrap) == "LassoLoop")
expect_true(binom_blasso_mod@bootstraped)
expect_false(binom_blasso_mod_wo_bootstrap@bootstraped)
expect_true(s_binom_blasso_mod@bootstraped)
expect_false(s_binom_blasso_mod_wo_bootstrap@bootstraped)
expect_true(binom_blasso_mod@family == "binomial")
expect_true(binom_blasso_mod_wo_bootstrap@family == "binomial")
expect_true(s_binom_blasso_mod@family == "binomial")
expect_true(s_binom_blasso_mod_wo_bootstrap@family == "binomial")
expect_false(binom_blasso_mod@family == "cox")
expect_false(binom_blasso_mod_wo_bootstrap@family == "cox")
expect_false(s_binom_blasso_mod@family == "cox")
expect_false(s_binom_blasso_mod_wo_bootstrap@family == "cox")
expect_true(binom_blasso_mod@length == 10)
expect_true(binom_blasso_mod_wo_bootstrap@length == 8)
expect_true(s_binom_blasso_mod@length == 10)
expect_true(s_binom_blasso_mod_wo_bootstrap@length == 8)
expect_error(binom_blasso(error_x, y, loops = 10, bootstrap = TRUE, ncores = 1))
expect_error(binom_blasso(x, error_y, loops = 10, bootstrap = TRUE, ncores = 1))
expect_error(binom_blasso(error_x, y, loops = 10, bootstrap = TRUE, ncores = 1, smote = TRUE))
expect_error(binom_blasso(x, error_y, loops = 10, bootstrap = TRUE, ncores = 1, smote = TRUE))
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
covr::package_coverage()
pkgdown::build_site()
binom_blasso_mod <- binom_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
devtools::load_all()
binom_blasso_mod <- binom_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
x <- mtcars[,1:7]
y <- mtcars$vs
error_x <- x[1:5,]
error_y <- mtcars[,8:9]
binom_blasso_mod <- binom_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
warnings()
binom_blasso_mod
binom_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
data("survival_cancer")
x <- survival_cancer[,4:10]
x <- data.frame(apply(x, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- survival_cancer[,2:3] %>% mutate(status = ifelse(status == 2,1,0))
error_x <- x[1:10,]
error_y <- y[,1]
##
cox_mod <- cox_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
binom_blasso(x, y, loops = 8, bootstrap = FALSE, ncores = 1, smote = TRUE)
x <- mtcars[,1:7]
y <- mtcars$vs
error_x <- x[1:5,]
error_y <- mtcars[,8:9]
binom_blasso(x, y, loops = 8, bootstrap = FALSE, ncores = 1, smote = TRUE)
x <- mtcars[,1:7]
y <- mtcars$vs
error_x <- x[1:5,]
error_y <- mtcars[,8:9]
##
binom_blasso_mod <- binom_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
devtools::load_all()
data("mtcars")
x <- mtcars[,1:6]
y <- mtcars$qsec
error_x <- x[1:5,]
error_y <- mtcars[,6:7]
blasso_mod <- blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
warnings()
devtools::load_all()
data("survival_cancer")
x <- survival_cancer[,4:10]
x <- data.frame(apply(x, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- survival_cancer[,2:3] %>% mutate(status = ifelse(status == 2,1,0))
error_x <- x[1:10,]
error_y <- y[,1]
cox_mod <- cox_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
cox_mod
devtools::load_all()
cox_mod <- cox_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
devtools::load_all()
data("mtcars")
x <- mtcars[,1:7]
y <- mtcars$vs
error_x <- x[1:5,]
error_y <- mtcars[,8:9]
##
binom_blasso_mod <- binom_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
data("survival_cancer")
x <- survival_cancer[,4:10]
x <- data.frame(apply(x, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- survival_cancer[,2:3] %>% mutate(status = ifelse(status == 2,1,0))
error_x <- x[1:10,]
error_y <- y[,1]
##
cox_mod <- cox_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
data("mtcars")
x <- mtcars[,1:6]
y <- mtcars$qsec
error_x <- x[1:5,]
error_y <- mtcars[,6:7]
##
blasso_mod <- blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
data("mtcars")
x <- mtcars[,1:7]
y <- mtcars$vs
error_x <- x[1:5,]
error_y <- mtcars[,8:9]
##
binom_blasso_mod <- binom_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
warnings()
s_binom_blasso_mod <- binom_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1, smote = TRUE)
s_binom_blasso_mod
devtools::load_all()
devtools::document(ç)
devtools::document()
devtools::load_all()
devtools::document()
pkgdown::build_site()
