data <- POMA::PomaNorm(data, method = "log_pareto")
x <- data.frame(t(Biobase::exprs(data)))
y <- as.factor(as.numeric(as.factor(data$group)))
# n <- length(y)
new_matrix <- cbind(y = as.character(as.factor(y)), x)
new_matrix <- performanceEstimation::smote(y ~ ., as.data.frame(new_matrix), perc.over = 2, perc.under = 2);table(new_matrix[,1])
new_matrix <- new_matrix %>% remove_rownames()
n <- nrow(new_matrix)
## TEST
idx_test <- sample(1:n, 0.2*n, replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
## TRAIN
train <- new_matrix[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
train_y
test_y
train_x <- train_x %>% mutate_all(as.numeric)
model <- randomForest::randomForest(train_x, as.factor(train_y))
rf_pred <- predict(model, newx = test_x, type = "class")
caret::confusionMatrix(as.factor(rf_pred), as.factor(test_y))$overall[1]
rf_pred
test_y
train_x
train_y
test_x
length(rf_pred)
length(test_y)
bin_mod <- binom_blasso(train_x, train_y, loops = 10, bootstrap = TRUE, ncores = 4)
model <- pick_best(bin_mod)$model
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(test_x), type = "class")
caret::confusionMatrix(as.factor(lasso_pred), as.factor(test_y))$overall[1]
pick_best(bin_mod)
bin_mod
model <- cv.glmnet(data.matrix(train_x), as.matrix(train_y), family = "binomial", parallel = TRUE)
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(test_x), type = "class")
caret::confusionMatrix(as.factor(lasso_pred), as.factor(test_y))$overall[1]
caret::confusionMatrix(as.factor(rf_pred), as.factor(test_y))$overall[1]
?randomForest
library(tidyverse)
# binomial
data <- POMA::st000336
data <- POMA::PomaImpute(data, method = "knn")
data <- POMA::PomaNorm(data, method = "log_pareto")
x <- data.frame(t(Biobase::exprs(data)))
y <- as.factor(as.numeric(as.factor(data$group)))
# n <- length(y)
new_matrix <- cbind(y = as.character(as.factor(y)), x)
new_matrix <- performanceEstimation::smote(y ~ ., as.data.frame(new_matrix), perc.over = 2, perc.under = 2);table(new_matrix[,1])
new_matrix <- new_matrix %>% remove_rownames()
n <- nrow(new_matrix)
## TEST
idx_test <- sample(1:n, 0.2*n, replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
## TRAIN
train <- new_matrix[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
View(test_x)
View(train_x)
train_y
test_y
# raw cv.glmnet
test_list <- list()
for (i in 1:10){
model <- cv.glmnet(data.matrix(train_x), as.matrix(train_y), family = "binomial", parallel = TRUE)
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(test_x), type = "class")
test_list[i] <- caret::confusionMatrix(as.factor(lasso_pred), as.factor(test_y))$overall[1]
}
# without bootstrap
test_list2 <- list()
for (i in 1:10){
bin_mod <- binom_blasso(train_x, train_y, loops = 10, bootstrap = FALSE, ncores = 4)
model <- pick_best(bin_mod)$model
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(test_x), type = "class")
test_list2[i] <- caret::confusionMatrix(as.factor(lasso_pred), as.factor(test_y))$overall[1]
}
# bootstrap and internal train/test
test_list3 <- list()
for (i in 1:10){
bin_mod <- binom_blasso(train_x, train_y, loops = 10, bootstrap = TRUE, ncores = 4)
model <- pick_best(bin_mod)$model
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(test_x), type = "class")
test_list3[i] <- caret::confusionMatrix(as.factor(lasso_pred), as.factor(test_y))$overall[1]
}
# randomForest
test_list4 <- list()
for (i in 1:10){
train_x <- train_x %>% mutate_all(as.numeric)
model <- randomForest::randomForest(train_x, as.factor(train_y))
rf_pred <- predict(model, newx = test_x, type = "class")
test_list4[i] <- caret::confusionMatrix(as.factor(rf_pred), as.factor(test_y))$overall[1]
}
results <- data.frame(raw_glmnet = unlist(test_list),
wo_bootstrap = unlist(test_list2),
bootstrap = unlist(test_list3))
melt_res <- reshape2::melt(results)
ggplot(melt_res) +
geom_boxplot(aes(variable, value, fill = variable)) +
geom_hline(yintercept = max(results), linetype = "dashed") +
geom_jitter(aes(variable, value, fill = variable)) +
theme_bw()
View(results)
# binomial
# data <- POMA::st000336
data <- POMA::st000284
exprs(data)
library(Biobase)
exprs(data)
data@phenoData@data$factors
exprs(data)[data@phenoData@data$factors != "Polyp",]
data <- data[data@phenoData@data$factors != "Polyp",]
data(BreastCancer, package="mlbench")
bc <- BreastCancer[complete.cases(BreastCancer), ]  # create copy
# binomial
data(BreastCancer, package="mlbench")
bc <- BreastCancer[complete.cases(BreastCancer), ]  # create copy
View(bc)
# binomial
data(BreastCancer, package = "mlbench")
bc <- BreastCancer[complete.cases(BreastCancer), ]  # create copy
bc <- bc %>% column_to_rownames("id")
library(tidyverse)
library(Biobase)
# binomial
data(BreastCancer, package = "mlbench")
bc <- BreastCancer[complete.cases(BreastCancer), ]  # create copy
bc <- bc %>% column_to_rownames("id")
x <- bc[,1:9]
y <- bc$Class
View(x)
y
library(tidyverse)
library(Biobase)
# binomial
data(BreastCancer, package = "mlbench")
bc <- BreastCancer[complete.cases(BreastCancer), ]  # create copy
bc <- bc %>% column_to_rownames("id") %>% mutate(Class = ifelse(Class == "benign", 1, 0))
x <- bc[,1:9]
y <- bc$Class
y
# binomial
data(BreastCancer, package = "mlbench")
bc <- BreastCancer[complete.cases(BreastCancer), ]  # create copy
bc <- bc %>% column_to_rownames("id") %>% mutate(Class = ifelse(Class == "benign", 1, 0))
bc <- bc %>% column_to_rownames("id")
bc <- bc %>% select(-id) %>% mutate(Class = ifelse(Class == "benign", 1, 0))
library(tidyverse)
# binomial
data(BreastCancer, package = "mlbench")
bc <- BreastCancer[complete.cases(BreastCancer), ]  # create copy
bc <- bc %>% select(-id) %>% mutate(Class = ifelse(Class == "benign", 1, 0))
bc <- bc %>% select(-1) %>% mutate(Class = ifelse(Class == "benign", 1, 0))
x <- bc[,1:9]
y <- bc$Class
y
library(tidyverse)
# binomial
data(BreastCancer, package = "mlbench")
bc <- BreastCancer[complete.cases(BreastCancer), ]  # create copy
bc <- bc %>% select(-1) %>% mutate(Class = ifelse(Class == "benign", 1, 0))
x <- bc[,1:9]
y <- bc$Class
n <- length(y)
## TEST
idx_test <- sample(1:n, 0.2*n, replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
library(tidyverse)
# binomial
data(BreastCancer, package = "mlbench")
bc <- BreastCancer[complete.cases(BreastCancer), ]  # create copy
bc <- bc %>% select(-1) %>% mutate(Class = ifelse(Class == "benign", 1, 0))
x <- bc[,1:9]
y <- bc$Class
n <- length(y)
idx_test <- sample(1:n, 0.2*n, replace = FALSE)
test <- x[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
train <- x[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
model <- cv.glmnet(data.matrix(train_x), as.matrix(train_y), family = "binomial", parallel = TRUE)
y
y <- as.factor(bc$Class)
n <- length(y)
idx_test <- sample(1:n, 0.2*n, replace = FALSE)
test <- x[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
train <- x[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
model <- cv.glmnet(data.matrix(train_x), as.matrix(train_y), family = "binomial", parallel = TRUE)
y
as.matrix(train_y)
model <- cv.glmnet(data.matrix(train_x), as.factor(train_y), family = "binomial", parallel = TRUE)
train_y
library(tidyverse)
# binomial
data(BreastCancer, package = "mlbench")
bc <- BreastCancer[complete.cases(BreastCancer), ]  # create copy
bc <- bc %>% select(-1) %>% mutate(Class = ifelse(Class == "benign", 1, 0))
x <- bc[,1:9]
y <- as.factor(bc$Class)
n <- length(y)
## TEST
idx_test <- sample(1:n, 0.2*n, replace = FALSE)
test <- x[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
## TRAIN
train <- x[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
train_y
View(train)
library(tidyverse)
# binomial
data(BreastCancer, package = "mlbench")
bc <- BreastCancer[complete.cases(BreastCancer), ]  # create copy
bc <- bc %>% select(-1) %>% mutate(Class = ifelse(Class == "benign", 1, 0))
x <- bc[,1:9]
y <- as.factor(bc$Class)
n <- length(y)
## TEST
idx_test <- sample(1:n, 0.2*n, replace = FALSE)
test <- x[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
## TRAIN
train <- x[-idx_test ,]
View(train)
library(tidyverse)
# binomial
data(BreastCancer, package = "mlbench")
bc <- BreastCancer[complete.cases(BreastCancer), ]  # create copy
bc <- bc %>% select(-1) %>% mutate(Class = ifelse(Class == "benign", 1, 0))
x <- bc[,1:9]
y <- as.factor(bc$Class)
n <- length(y)
new_matrix <- cbind(y, x)
## TEST
idx_test <- sample(1:n, 0.2*n, replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
## TRAIN
train <- new_matrix[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
train_y
test_y
model <- cv.glmnet(data.matrix(train_x), as.matrix(train_y), family = "binomial", parallel = TRUE)
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(test_x), type = "class")
caret::confusionMatrix(as.factor(lasso_pred), as.factor(test_y))$overall[1]
bin_mod <- binom_blasso(train_x, train_y, loops = 10, bootstrap = TRUE, ncores = 4)
model <- pick_best(bin_mod)$model
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(test_x), type = "class")
caret::confusionMatrix(as.factor(lasso_pred), as.factor(test_y))$overall[1]
binom_blasso(train_x, train_y, loops = 10, bootstrap = TRUE, ncores = 4, smote = T)
train_x
train_y
load("~/Dropbox/BclogitLasso/data/cleanData/IQRx1_5/Bordeaux_Clean_IQRx1_5.RData")
y <- as.factor(target$target)
y
library(tidyverse)
# binomial
load("~/Dropbox/BclogitLasso/data/cleanData/IQRx1_5/Bordeaux_Clean_IQRx1_5.RData")
x <- metabolites
y <- as.factor(target$target)
##
n <- length(y)
new_matrix <- cbind(y, x)
## TEST
idx_test <- sample(1:n, 0.2*n, replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
## TRAIN
train <- new_matrix[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
train_y
test_y
model <- cv.glmnet(data.matrix(train_x), as.matrix(train_y), family = "binomial", parallel = TRUE)
# binomial
load("~/Dropbox/BclogitLasso/data/cleanData/IQRx1_5/Bordeaux_Clean_IQRx1_5.RData")
x <- data.frame(apply(metabolites, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- as.factor(target$target)
n <- length(y)
new_matrix <- cbind(y, x)
idx_test <- sample(1:n, 0.2*n, replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
train <- new_matrix[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
model <- cv.glmnet(data.matrix(train_x), as.matrix(train_y), family = "binomial", parallel = TRUE)
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(test_x), type = "class")
caret::confusionMatrix(as.factor(lasso_pred), as.factor(test_y))$overall[1]
devtools::load_all()
devtools::document()
library(tidyverse)
# binomial
load("~/Dropbox/BclogitLasso/data/cleanData/IQRx1_5/Bordeaux_Clean_IQRx1_5.RData")
x <- data.frame(apply(metabolites, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- as.factor(target$target)
##
n <- length(y)
new_matrix <- cbind(y, x)
## TEST
idx_test <- sample(1:n, 0.2*n, replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
## TRAIN
train <- new_matrix[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
train_x <- train_x %>% mutate_all(as.numeric)
model <- randomForest::randomForest(train_x, as.factor(train_y))
rf_pred <- predict(model, newx = test_x, type = "class")
caret::confusionMatrix(as.factor(rf_pred), as.factor(test_y))$overall[1]
train_x <- train_x %>% mutate_all(as.numeric)
test_x <- test_x %>% mutate_all(as.numeric)
model <- randomForest::randomForest(train_x, as.factor(train_y))
rf_pred <- predict(model, newx = test_x, type = "class")
caret::confusionMatrix(as.factor(rf_pred), as.factor(test_y))$overall[1]
rf_pred <- predict(model, newdata = test_x, type = "class")
caret::confusionMatrix(as.factor(rf_pred), as.factor(test_y))$overall[1]
as.factor(test_y)
library(tidyverse)
# binomial
load("~/Dropbox/BclogitLasso/data/cleanData/IQRx1_5/Bordeaux_Clean_IQRx1_5.RData")
x <- data.frame(apply(metabolites, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- as.factor(target$target)
##
n <- length(y)
new_matrix <- cbind(y, x)
## TEST
idx_test <- sample(1:n, 0.2*n, replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
## TRAIN
train <- new_matrix[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
###########################
###########################
###########################
## SIMULATION
# raw cv.glmnet
test_list <- list()
for (i in 1:20){
model <- cv.glmnet(data.matrix(train_x), as.matrix(train_y), family = "binomial", parallel = TRUE)
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(test_x), type = "class")
test_list[i] <- caret::confusionMatrix(as.factor(lasso_pred), as.factor(test_y))$overall[1]
}
# without bootstrap
test_list2 <- list()
for (i in 1:20){
bin_mod <- binom_blasso(train_x, train_y, loops = 100, bootstrap = FALSE, ncores = 4)
model <- pick_best(bin_mod)$model
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(test_x), type = "class")
test_list2[i] <- caret::confusionMatrix(as.factor(lasso_pred), as.factor(test_y))$overall[1]
}
# bootstrap and internal train/test
test_list3 <- list()
for (i in 1:20){
bin_mod <- binom_blasso(train_x, train_y, loops = 100, bootstrap = TRUE, ncores = 4)
model <- pick_best(bin_mod)$model
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(test_x), type = "class")
test_list3[i] <- caret::confusionMatrix(as.factor(lasso_pred), as.factor(test_y))$overall[1]
}
# randomForest
test_list4 <- list()
for (i in 1:20){
train_x <- train_x %>% mutate_all(as.numeric)
test_x <- test_x %>% mutate_all(as.numeric)
model <- randomForest::randomForest(train_x, as.factor(train_y))
rf_pred <- predict(model, newdata = test_x, type = "class")
test_list4[i] <- caret::confusionMatrix(as.factor(rf_pred), as.factor(test_y))$overall[1]
}
##
results <- data.frame(raw_glmnet = unlist(test_list),
wo_bootstrap = unlist(test_list2),
bootstrap = unlist(test_list3),
randomForest = unlist(test_list4))
# save(results, file = "/home/pol/Escritorio/2_simulation_lassoloops.Rdata")
##
melt_res <- reshape2::melt(results)
ggplot(melt_res) +
geom_boxplot(aes(variable, value, fill = variable)) +
geom_hline(yintercept = max(results), linetype = "dashed") +
geom_jitter(aes(variable, value, fill = variable)) +
theme_bw()
library(tidyverse)
# binomial
load("~/Dropbox/BclogitLasso/data/cleanData/IQRx1_5/Bordeaux_Clean_IQRx1_5.RData")
x <- data.frame(apply(metabolites, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- as.factor(target$target)
##
n <- length(y)
new_matrix <- cbind(y, x)
## TEST
idx_test <- sample(1:n, 0.2*n, replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
## TRAIN
train <- new_matrix[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
###########################
###########################
###########################
## SIMULATION
# raw cv.glmnet
test_list <- list()
for (i in 1:10){
model <- cv.glmnet(data.matrix(train_x), as.matrix(train_y), family = "binomial", parallel = TRUE)
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(test_x), type = "class")
test_list[i] <- caret::confusionMatrix(as.factor(lasso_pred), as.factor(test_y))$overall[1]
}
# without bootstrap
test_list2 <- list()
for (i in 1:10){
bin_mod <- binom_blasso(train_x, train_y, loops = 50, bootstrap = FALSE, ncores = 4)
model <- pick_best(bin_mod)$model
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(test_x), type = "class")
test_list2[i] <- caret::confusionMatrix(as.factor(lasso_pred), as.factor(test_y))$overall[1]
}
# bootstrap and internal train/test
test_list3 <- list()
for (i in 1:10){
bin_mod <- binom_blasso(train_x, train_y, loops = 50, bootstrap = TRUE, ncores = 4)
model <- pick_best(bin_mod)$model
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(test_x), type = "class")
test_list3[i] <- caret::confusionMatrix(as.factor(lasso_pred), as.factor(test_y))$overall[1]
}
# randomForest
test_list4 <- list()
for (i in 1:10){
train_x <- train_x %>% mutate_all(as.numeric)
test_x <- test_x %>% mutate_all(as.numeric)
model <- randomForest::randomForest(train_x, as.factor(train_y))
rf_pred <- predict(model, newdata = test_x, type = "class")
test_list4[i] <- caret::confusionMatrix(as.factor(rf_pred), as.factor(test_y))$overall[1]
}
##
results <- data.frame(raw_glmnet = unlist(test_list),
wo_bootstrap = unlist(test_list2),
bootstrap = unlist(test_list3),
randomForest = unlist(test_list4))
# save(results, file = "/home/pol/Escritorio/2_simulation_lassoloops.Rdata")
##
melt_res <- reshape2::melt(results)
ggplot(melt_res) +
geom_boxplot(aes(variable, value, fill = variable)) +
geom_hline(yintercept = max(results), linetype = "dashed") +
geom_jitter(aes(variable, value, fill = variable)) +
theme_bw()
save(results, file = "/Users/pol/Desktop/3_simulation_lassoloops.Rdata")
results <- data.frame(raw_glmnet = unlist(test_list),
No_bootstrap = unlist(test_list2),
Bootstrap = unlist(test_list3),
RandomForest = unlist(test_list4))
melt_res <- reshape2::melt(results)
ggplot(melt_res) +
geom_boxplot(aes(variable, value, fill = variable)) +
geom_hline(yintercept = max(results), linetype = "dashed") +
geom_jitter(aes(variable, value, fill = variable)) +
theme_bw()
save(results, file = "/Users/pol/Desktop/3_simulation_lassoloops.Rdata")
ggplot(melt_res) +
geom_boxplot(aes(variable, value, fill = variable)) +
geom_hline(yintercept = max(results), linetype = "dashed") +
geom_jitter(aes(variable, value, fill = variable)) +
theme_bw() +
xlab("")
ggplot(melt_res) +
geom_boxplot(aes(variable, value, fill = variable)) +
geom_hline(yintercept = max(results), linetype = "dashed") +
geom_jitter(aes(variable, value, fill = variable)) +
theme_bw() +
xlab("") +
ylab("Accuracy")
View(results)
load("~/Desktop/3_simulation_lassoloops.Rdata")
View(results)
melt_res <- reshape2::melt(results)
ggplot(melt_res) +
geom_boxplot(aes(variable, value, fill = variable)) +
geom_hline(yintercept = max(results), linetype = "dashed") +
geom_jitter(aes(variable, value, fill = variable)) +
theme_bw() +
xlab("") +
ylab("Accuracy")
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
pkgdown::build_site()
