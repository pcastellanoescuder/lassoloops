test_list2 <- list()
for (i in 1:100){
tictoc::tic()
train_x <- train_x %>% mutate_all(as.numeric)
test_x <- test_x %>% mutate_all(as.numeric)
model <- randomForest::randomForest(train_x, as.factor(train_y))
rf_pred <- predict(model, newdata = test_x, type = "class")
test_list2[i] <- caret::confusionMatrix(as.factor(rf_pred), as.factor(test_y))$overall[1]
tictoc::toc()
}
##
results <- data.frame(RandomBootstrap = unlist(test_list1),
RandomForest = unlist(test_list2))
melt_res <- reshape2::melt(results)
ggplot(melt_res) +
geom_boxplot(aes(variable, value, fill = variable)) +
geom_hline(yintercept = max(results), linetype = "dashed") +
geom_jitter(aes(variable, value, fill = variable)) +
theme_bw() +
xlab("") +
ylab("Accuracy")
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(test_x[, colnames(test_x) %in% pick_best(bin_mod)$coefficients$name], type = "class")
test_list1[i] <- caret::confusionMatrix(as.factor(lasso_pred), as.factor(test_y))$overall[1]
}
# randomForest
test_list2 <- list()
for (i in 1:100){
tictoc::tic()
train_x <- train_x %>% mutate_all(as.numeric)
test_x <- test_x %>% mutate_all(as.numeric)
model <- randomForest::randomForest(train_x, as.factor(train_y))
rf_pred <- predict(model, newdata = test_x, type = "class")
test_list2[i] <- caret::confusionMatrix(as.factor(rf_pred), as.factor(test_y))$overall[1]
tictoc::toc()
}
##
results <- data.frame(RandomBootstrap = unlist(test_list1),
RandomForest = unlist(test_list2))
melt_res <- reshape2::melt(results)
ggplot(melt_res) +
geom_boxplot(aes(variable, value, fill = variable)) +
geom_hline(yintercept = max(results), linetype = "dashed") +
geom_jitter(aes(variable, value, fill = variable)) +
theme_bw() +
xlab("") +
ylab("Accuracy")
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(test_x[, colnames(test_x) %in% pick_best(bin_mod)$coefficients$name]), type = "class")
bin_mod <- random_binom_blasso(train_x, train_y, loops = 5, bootstrap = TRUE, ncores = 4)
model <- pick_best(bin_mod)$model
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(test_x[, colnames(test_x) %in% pick_best(bin_mod)$coefficients$name]), type = "class")
data.matrix(test_x[, colnames(test_x) %in% pick_best(bin_mod)$coefficients$name])
bin_mod <- random_binom_blasso(train_x, train_y, loops = 5, bootstrap = TRUE, ncores = 4)
model <- pick_best(bin_mod)$model
test <- data.matrix(test_x[, colnames(test_x) %in% pick_best(bin_mod)$coefficients$name])
lasso_pred <- predict(model, s = model$lambda.min, newx = test, type = "class")
test <- data.matrix(test_x[, colnames(test_x) %in% pick_best(bin_mod)$coefficients$name])
lasso_pred <- predict(model, s = model$lambda.min, newx = test, type = "class")
# test <- data.matrix(test_x[, colnames(test_x) %in% pick_best(bin_mod)$coefficients$name])
test <- model.matrix(~., data = test_x)
lasso_pred <- predict(model, s = model$lambda.min, newx = test, type = "class")
dim(train_x)
dim(test_x)
View(train_x)
View(test_x)
# test <- data.matrix(test_x[, colnames(test_x) %in% pick_best(bin_mod)$coefficients$name])
test <- model.matrix(~., data = test_x)
test
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(test), type = "class")
test_list1[i] <- caret::confusionMatrix(as.factor(lasso_pred), as.factor(test_y))$overall[1]
bin_mod <- random_binom_blasso(train_x, train_y, loops = 5, bootstrap = TRUE, ncores = 4)
model <- pick_best(bin_mod)$model
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(test_x), type = "class")
bin_mod <- random_binom_blasso(train_x, train_y, loops = 5, bootstrap = TRUE, ncores = 4)
model <- pick_best(bin_mod)$model
bin_mod <- random_binom_blasso(train_x, train_y, loops = 100, bootstrap = TRUE, ncores = 4)
# library(tidyverse)
library(lassoloops)
# library(glmnet)
# library(caret)
# library(randomForest)
library(magrittr)
library(dplyr)
library(ggplot2)
# binomial
load("/Users/pol/Desktop/lassoloops_simulations/data/Bordeaux_Clean_IQRx1_5.RData")
x <- data.frame(apply(metabolites, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- as.factor(target$target)
##
n <- length(y)
new_matrix <- cbind(y, x)
## TEST
idx_test <- sample(1:n, 0.2*n, replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
## TRAIN
train <- new_matrix[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
bin_mod <- random_binom_blasso(train_x, train_y, loops = 100, bootstrap = TRUE, ncores = 4)
model <- pick_best(bin_mod)$model
model
predict(model, newx = data.matrix(test))
predict(model, newx = data.matrix(test_x))
predict(model, newx = data.matrix(train_x))
predict
glmnet::predict.glmnet()
glmnet:::predict.glmnet()
# library(tidyverse)
library(lassoloops)
# library(glmnet)
# library(caret)
# library(randomForest)
library(magrittr)
library(dplyr)
library(ggplot2)
# binomial
load("/Users/pol/Desktop/lassoloops_simulations/data/Bordeaux_Clean_IQRx1_5.RData")
x <- data.frame(apply(metabolites, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- as.factor(target$target)
##
n <- length(y)
new_matrix <- cbind(y, x)
## TEST
idx_test <- sample(1:n, 0.2*n, replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- data.frame(test[,-1])
test_y <- data.frame(test[,1])
## TRAIN
train <- new_matrix[-idx_test ,]
train_x <- data.frame(train[,-1])
train_y <- data.frame(train[,1])
bin_mod <- random_binom_blasso(train_x, train_y, loops = 10, bootstrap = TRUE, ncores = 4)
bin_mod <- random_binom_blasso(as.matrix(train_x), train_y, loops = 10, bootstrap = TRUE, ncores = 4)
bin_mod <- random_binom_blasso(as.matrix(train_x), as.matrix(train_y), loops = 10, bootstrap = TRUE, ncores = 4)
bin_mod <- random_binom_blasso(data.matrix(train_x), data.matrix(train_y), loops = 10, bootstrap = TRUE, ncores = 4)
model <- pick_best(bin_mod)$model
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(test_x), type = "class")
lasso_pred <- predict(model, s = model$lambda.min, newx = test_x, type = "class")
lasso_pred <- predict(model, s = model$lambda.min, newx = matrix(test_x), type = "class")
lasso_pred <- predict(model, s = model$lambda.min, newx = asmatrix(test_x), type = "class")
lasso_pred <- predict(model, s = model$lambda.min, newx = as.matrix(test_x), type = "class")
levels(train_y)
bin_mod <- random_binom_blasso(data.matrix(train_x), as.factor(train_y), loops = 10, bootstrap = TRUE, ncores = 4)
bin_mod <- random_binom_blasso(data.matrix(train_x), as.factor(matrix(train_y)), loops = 10, bootstrap = TRUE, ncores = 4)
bin_mod <- random_binom_blasso(data.matrix(train_x), as.matrix(train_y), loops = 10, bootstrap = TRUE, ncores = 4)
model <- pick_best(bin_mod)$model
# library(tidyverse)
library(lassoloops)
# library(glmnet)
# library(caret)
# library(randomForest)
library(magrittr)
library(dplyr)
library(ggplot2)
# binomial
load("/Users/pol/Desktop/lassoloops_simulations/data/Bordeaux_Clean_IQRx1_5.RData")
x <- data.frame(apply(metabolites, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- as.factor(target$target)
##
n <- length(y)
new_matrix <- cbind(y, x)
## TEST
idx_test <- sample(1:n, 0.2*n, replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
## TRAIN
train <- new_matrix[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
bin_mod <- random_binom_blasso(train_x, train_y, loops = 10, bootstrap = TRUE, ncores = 4)
model <- pick_best(bin_mod)$model
as.formula(pick_best(bin_mod)$coefficients$name)
as.formula(paste0(pick_best(bin_mod)$coefficients$name, sep = "+"))
# binomial
load("/Users/pol/Desktop/lassoloops_simulations/data/Bordeaux_Clean_IQRx1_5.RData")
x <- data.frame(apply(metabolites, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y))) %>%
janitor::clean_names()
y <- as.factor(target$target)
n <- length(y)
new_matrix <- cbind(y, x)
idx_test <- sample(1:n, 0.2*n, replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
train <- new_matrix[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
bin_mod <- random_binom_blasso(train_x, train_y, loops = 10, bootstrap = TRUE, ncores = 4)
as.formula(paste0(pick_best(bin_mod)$coefficients$name, sep = "+"))
paste0(pick_best(bin_mod)$coefficients$name, sep = "+")
as.formula(paste0(pick_best(bin_mod)$coefficients$name, collapse =  = "+"))
as.formula(paste0(pick_best(bin_mod)$coefficients$name, collapse = "+"))
names <- names[names != "(Intercept)"]
names <- pick_best(bin_mod)$coefficients$name
names <- names[names != "(Intercept)"]
as.formula(paste0(names, collapse = "+"))
paste0(names, collapse = "+")
paste0(names, collapse = " + ")
paste0("y ~ ", paste0(names, collapse = " + ")))
paste0("y ~ ", paste0(names, collapse = " + "))
fr <- as.formula(paste0("y ~ ", paste0(names, collapse = " + ")))
fr <- as.formula(paste0("y ~ ", paste0(names, collapse = " + ")))
model <- lm(fr, data = train_x)
model <- lm(fr, data = train)
lasso_pred <- predict(model, s = model$lambda.min, newx = as.matrix(test_x), type = "class")
c
bin_mod <- random_binom_blasso(new_matrix[idx_test], train_y, loops = 10, bootstrap = TRUE, ncores = 4)
bin_mod <- random_binom_blasso(new_matrix[idx_test,], train_y, loops = 10, bootstrap = TRUE, ncores = 4)
bin_mod <- random_binom_blasso(new_matrix[idx_test,][,-1], train_y, loops = 10, bootstrap = TRUE, ncores = 4)
new_matrix[idx_test,][,-1]
bin_mod <- random_binom_blasso(new_matrix[idx_test,][,-1], new_matrix[idx_test,][,1], loops = 10, bootstrap = TRUE, ncores = 4)
bin_mod <- random_binom_blasso(new_matrix[-idx_test,][,-1], new_matrix[-idx_test,][,1], loops = 10, bootstrap = TRUE, ncores = 4)
model <- pick_best(bin_mod)$model
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(new_matrix[idx_test,][,-1]), type = "class")
data.matrix(new_matrix[idx_test,][,-1]
)
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(new_matrix[idx_test,]), type = "class")
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(new_matrix[idx_test,][,-1]), type = "class")
test_list1[i] <- caret::confusionMatrix(as.factor(lasso_pred), as.factor(test_y))$overall[1]
bin_mod <- binom_blasso(new_matrix[-idx_test,][,-1], new_matrix[-idx_test,][,1], loops = 5, bootstrap = TRUE, ncores = 4)
model <- pick_best(bin_mod)$model
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(new_matrix[idx_test,][,-1]), type = "class")
model$lambda
bin_mod <- binom_blasso(new_matrix[-idx_test,][,-1], new_matrix[-idx_test,][,1], loops = 5, bootstrap = TRUE, ncores = 4)
model <- pick_best(bin_mod)$model
model$lambda
bin_mod <- random_binom_blasso(new_matrix[-idx_test,][,-1], new_matrix[-idx_test,][,1], loops = 5, bootstrap = TRUE, ncores = 4)
model <- pick_best(bin_mod)$model
model$lambda
bin_mod <- random_binom_blasso(new_matrix[-idx_test,][,-1], new_matrix[-idx_test,][,1], loops = 5, bootstrap = TRUE, ncores = 4)
model <- pick_best(bin_mod)$model
bin_mod <- random_binom_blasso(new_matrix[-idx_test,][,-1], new_matrix[-idx_test,][,1], loops = 5, bootstrap = TRUE, ncores = 4)
model$lambda
model$cvlo
?randomForest::randomForest
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
data("mtcars")
x <- mtcars[,1:7]
y <- mtcars$vs
test <- random_binom_blasso(x, y, loops = 100, bootstrap = TRUE, ncores = 4)
test <- random_binom_blasso(x, y, loops = 100, bootstrap = TRUE, ncores = 4)
test <- random_binom_blasso(x, y, loops = 50, bootstrap = TRUE, ncores = 4)
test <- random_binom_blasso(x, y, loops = 5, bootstrap = TRUE, ncores = 4)
test
pick_best(test)
model <- pick_best(test)$model
predict(model, s = model$lambda.min, newx = mtcars[mtcars[c(1:4),c(1:7)]])
model <- pick_best(test)$model
predict(model, s = model$lambda.min, newx = mtcars[mtcars[c(1:4),c(1:7)]])
mtcars[mtcars[c(1:4),c(1:7)]
predict(model, s = model$lambda.min, newx = mtcars[mtcars[c(1:4),c(1:7)])
predict(model, s = model$lambda.min, newx = mtcars[mtcars[c(1:4),c(1:7)])
mtcars[mtcars[c(1:4),c(1:7)]
)
predict(model, s = model$lambda.min, newx = mtcars[c(1:4),c(1:7)])
predict(model, s = model$lambda.min, newx = data.matrix(mtcars[c(1:4),c(1:7)]))
newx = data.matrix(mtcars[c(1:4),c(1:7)])
cbind2(1, newx) %*% nbeta
cbind2(1, newx) %*% model$name
cbind2(1, newx)
predict(model, s = model$lambda.min, newx = data.matrix(mtcars[c(1:4),c(1:7)]))
x <- cbind(y, x)
x <- mtcars[,1:7]
y <- mtcars$vs
x <- cbind(y, x)
x <- sparse.model.matrix(as.formula(paste("y ~", paste(colnames(x[,-1]), sep = "", collapse=" +"))), data = x)
test <- random_binom_blasso(x, y, loops = 5, bootstrap = TRUE, ncores = 4)
model <- pick_best(test)$model
predict(model, s = model$lambda.min, newx = data.matrix(mtcars[c(1:4),c(1:7)]))
predict(model, s = model$lambda.min, newx = x[-(1:nrow(x)),])
predict(model, s = model$lambda.min, newx = x[-(1:nrow(x)),])
x[-(1:nrow(x)),]
predict(model, s = model$lambda.min, newx = data.matrix(x[-(1:nrow(x)),]))
predict(model, s = model$lambda.min, newx = data.matrix(x[-(1:nrow(x)),]))
predict(model, s = model$lambda.min, newx = x[-(1:nrow(x)),])
model
x <- mtcars[,1:7]
y <- mtcars$vs
test <- random_binom_blasso(x, y, loops = 5, bootstrap = TRUE, ncores = 4, alpha = 0)
model <- pick_best(test)$model
model
pick_best(test)$
)
pick_best(test)
devtools::load_all()
devtools::document()
library(randomForest)
library(magrittr)
library(dplyr)
# binomial
load("/Users/pol/Desktop/lassoloops_simulations/data/Bordeaux_Clean_IQRx1_5.RData")
x <- data.frame(apply(metabolites, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- as.factor(target$target)
##
n <- length(y)
new_matrix <- cbind(y, x)
## TEST
idx_test <- sample(1:n, 0.2*n, replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
## TRAIN
train <- new_matrix[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
rand_bin_mod <- random_binom_blasso(train_x, train_y, loops = 10, bootstrap = TRUE, ncores = 4)
model <- pick_best(rand_bin_mod)$model
rand_vars <- pick_best(rand_bin_mod)$random_vars
rand_vars
devtools::load_all()
# binomial
load("/Users/pol/Desktop/lassoloops_simulations/data/Bordeaux_Clean_IQRx1_5.RData")
x <- data.frame(apply(metabolites, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- as.factor(target$target)
##
n <- length(y)
new_matrix <- cbind(y, x)
## TEST
idx_test <- sample(1:n, 0.2*n, replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
## TRAIN
train <- new_matrix[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
rand_bin_mod <- random_binom_blasso(train_x, train_y, loops = 10, bootstrap = TRUE, ncores = 4)
model <- pick_best(rand_bin_mod)$model
model
rand_vars <- pick_best(rand_bin_mod)$random_vars
rand_vars
test_x <- test_x[,colnames(test_x) %in% rand_vars]
test_x
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(test_x), type = "class")
# binomial
load("/Users/pol/Desktop/lassoloops_simulations/data/Bordeaux_Clean_IQRx1_5.RData")
x <- data.frame(apply(metabolites, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- as.factor(target$target)
##
n <- length(y)
new_matrix <- cbind(y, x)
## TEST
idx_test <- sample(1:n, 0.2*n, replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
## TRAIN
train <- new_matrix[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
test_list1 <- list()
for (i in 1:10){
rand_bin_mod <- random_binom_blasso(train_x, train_y, loops = 100, bootstrap = TRUE, ncores = 4)
model <- pick_best(rand_bin_mod)$model
rand_vars <- pick_best(rand_bin_mod)$random_vars
test_x <- test_x[,colnames(test_x) %in% rand_vars]
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(test_x), type = "class")
test_list1[i] <- caret::confusionMatrix(as.factor(lasso_pred), as.factor(test_y))$overall[1]
}
# randomForest
test_list2 <- list()
for (i in 1:10){
tictoc::tic()
train_x <- train_x %>% mutate_all(as.numeric)
test_x <- test_x %>% mutate_all(as.numeric)
model <- randomForest::randomForest(train_x, as.factor(train_y))
rf_pred <- predict(model, newdata = test_x, type = "class")
test_list2[i] <- caret::confusionMatrix(as.factor(rf_pred), as.factor(test_y))$overall[1]
tictoc::toc()
}
##
results <- data.frame(RandomBlasso = unlist(test_list1),
RandomForest = unlist(test_list2))
test_list1 <- list()
for (i in 1:10){
rand_bin_mod <- random_binom_blasso(train_x, train_y, loops = 100, bootstrap = TRUE, ncores = 4)
model <- pick_best(rand_bin_mod)$model
rand_vars <- pick_best(rand_bin_mod)$random_vars
test_x <- test_x[, colnames(test_x) %in% rand_vars]
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(test_x), type = "class")
test_list1[i] <- caret::confusionMatrix(as.factor(lasso_pred), as.factor(test_y))$overall[1]
}
model
rand_vars
test_x
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(test_x), type = "class")
test_x
# binomial
load("/Users/pol/Desktop/lassoloops_simulations/data/Bordeaux_Clean_IQRx1_5.RData")
x <- data.frame(apply(metabolites, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- as.factor(target$target)
##
n <- length(y)
new_matrix <- cbind(y, x)
## TEST
idx_test <- sample(1:n, 0.2*n, replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
## TRAIN
train <- new_matrix[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
###########################################
###########################################
# ramdom bootstrap
test_list1 <- list()
for (i in 1:10){
rand_bin_mod <- random_binom_blasso(train_x, train_y, loops = 100, bootstrap = TRUE, ncores = 4)
model <- pick_best(rand_bin_mod)$model
rand_vars <- pick_best(rand_bin_mod)$random_vars
test_sub <- test_x[, colnames(test_x) %in% rand_vars]
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(test_sub), type = "class")
test_list1[i] <- caret::confusionMatrix(as.factor(lasso_pred), as.factor(test_y))$overall[1]
}
# randomForest
test_list2 <- list()
for (i in 1:10){
tictoc::tic()
train_x <- train_x %>% mutate_all(as.numeric)
test_x <- test_x %>% mutate_all(as.numeric)
model <- randomForest::randomForest(train_x, as.factor(train_y))
rf_pred <- predict(model, newdata = test_x, type = "class")
test_list2[i] <- caret::confusionMatrix(as.factor(rf_pred), as.factor(test_y))$overall[1]
tictoc::toc()
}
##
results <- data.frame(RandomBlasso = unlist(test_list1),
RandomForest = unlist(test_list2))
##
library(ggplot2)
melt_res <- reshape2::melt(results)
ggplot(melt_res) +
geom_boxplot(aes(variable, value, fill = variable)) +
geom_hline(yintercept = max(results), linetype = "dashed") +
geom_jitter(aes(variable, value, fill = variable)) +
theme_bw() +
xlab("") +
ylab("Accuracy")
# ramdom bootstrap
test_list1 <- list()
for (i in 1:1){
rand_bin_mod <- random_binom_blasso(train_x, train_y, loops = 1000, bootstrap = TRUE, ncores = 4)
model <- pick_best(rand_bin_mod)$model
rand_vars <- pick_best(rand_bin_mod)$random_vars
test_sub <- test_x[, colnames(test_x) %in% rand_vars]
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(test_sub), type = "class")
test_list1[i] <- caret::confusionMatrix(as.factor(lasso_pred), as.factor(test_y))$overall[1]
}
# randomForest
test_list2 <- list()
for (i in 1:1){
tictoc::tic()
train_x <- train_x %>% mutate_all(as.numeric)
test_x <- test_x %>% mutate_all(as.numeric)
model <- randomForest::randomForest(train_x, as.factor(train_y))
rf_pred <- predict(model, newdata = test_x, type = "class")
test_list2[i] <- caret::confusionMatrix(as.factor(rf_pred), as.factor(test_y))$overall[1]
tictoc::toc()
}
##
results <- data.frame(RandomBlasso = unlist(test_list1),
RandomForest = unlist(test_list2))
##
library(ggplot2)
melt_res <- reshape2::melt(results)
ggplot(melt_res) +
geom_boxplot(aes(variable, value, fill = variable)) +
geom_hline(yintercept = max(results), linetype = "dashed") +
geom_jitter(aes(variable, value, fill = variable)) +
theme_bw() +
xlab("") +
ylab("Accuracy")
# ramdom bootstrap
test_list1 <- list()
for (i in 1:100){
rand_bin_mod <- random_binom_blasso(train_x, train_y, loops = 20, bootstrap = TRUE, ncores = 4)
model <- pick_best(rand_bin_mod)$model
rand_vars <- pick_best(rand_bin_mod)$random_vars
test_sub <- test_x[, colnames(test_x) %in% rand_vars]
lasso_pred <- predict(model, s = model$lambda.min, newx = data.matrix(test_sub), type = "class")
test_list1[i] <- caret::confusionMatrix(as.factor(lasso_pred), as.factor(test_y))$overall[1]
}
# randomForest
test_list2 <- list()
for (i in 1:100){
tictoc::tic()
train_x <- train_x %>% mutate_all(as.numeric)
test_x <- test_x %>% mutate_all(as.numeric)
model <- randomForest::randomForest(train_x, as.factor(train_y))
rf_pred <- predict(model, newdata = test_x, type = "class")
test_list2[i] <- caret::confusionMatrix(as.factor(rf_pred), as.factor(test_y))$overall[1]
tictoc::toc()
}
##
results <- data.frame(RandomBlasso = unlist(test_list1),
RandomForest = unlist(test_list2))
##
library(ggplot2)
melt_res <- reshape2::melt(results)
ggplot(melt_res) +
geom_boxplot(aes(variable, value, fill = variable)) +
geom_hline(yintercept = max(results), linetype = "dashed") +
geom_jitter(aes(variable, value, fill = variable)) +
theme_bw() +
xlab("") +
ylab("Accuracy")
