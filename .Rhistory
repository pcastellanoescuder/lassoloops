data <- survival::cancer
usethis::use_data(data)
usethis::use_data(data, file = "survival_cancer.Rdata")
usethis::use_data(data, "survival_cancer.Rdata")
?usethis::use_data
survival_cancer <- survival::cancer
usethis::use_data(survival_cancer)
usethis::use_r("data")
?survival::cancer
survival_cancer
data("survival_cancer")
x <- survival_cancer[,4:10]
x <- data.frame(apply(x, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- survival_cancer[,2:3] %>% mutate(status = ifelse(status == 2,1,0))
cox_mod <- cox_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
cox_mod_wo_bootstrap <- cox_blasso(x, y, loops = 10, bootstrap = FALSE, ncores = 1)
cox_mod
data("survival_cancer")
x <- survival_cancer[,4:10]
x <- data.frame(apply(x, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- survival_cancer[,2:3] %>% mutate(status = ifelse(status == 2,1,0))
error_x <- x[1:10,]
error_y <- y[,1]
cox_mod <- cox_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
cox_mod_wo_bootstrap <- cox_blasso(x, y, loops = 10, bootstrap = FALSE, ncores = 1)
expect_error(cox_blasso(error_x, y, loops = 10, bootstrap = TRUE, ncores = 1))
library(testthat)
expect_error(cox_blasso(error_x, y, loops = 10, bootstrap = TRUE, ncores = 1))
expect_error(cox_blasso(x, error_y, loops = 10, bootstrap = TRUE, ncores = 1))
class(cox_mod)
expect_true(class(cox_mod) == "LassoLoop")
expect_true(class(cox_mod_wo_bootstrap) == "LassoLoop")
data("survival_cancer")
x <- survival_cancer[,4:10]
x <- data.frame(apply(x, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- survival_cancer[,2:3] %>% mutate(status = ifelse(status == 2,1,0))
error_x <- x[1:10,]
error_y <- y[,1]
cox_mod <- cox_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
cox_mod_wo_bootstrap <- cox_blasso(x, y, loops = 8, bootstrap = FALSE, ncores = 1)
expect_true(class(cox_mod) == "LassoLoop")
expect_true(class(cox_mod_wo_bootstrap) == "LassoLoop")
expect_true(cox_mod@bootstraped)
expect_false(cox_mod_wo_bootstrap@bootstraped)
expect_true(cox_mod@family == "cox")
expect_true(cox_mod_wo_bootstrap@family == "cox")
expect_true(cox_mod@length == 10)
expect_true(cox_mod_wo_bootstrap@length == 8)
expect_error(cox_blasso(error_x, y, loops = 10, bootstrap = TRUE, ncores = 1))
expect_error(cox_blasso(x, error_y, loops = 10, bootstrap = TRUE, ncores = 1))
mtcars
x <- mtcars[,1:6]
y <- mtcars$qsec
View(x)
y
x <- mtcars[,1:6]
y <- mtcars$qsec
error_x <- x[1:5,]
error_y <- mtcars[,6:7]
blasso_mod <- blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
blasso_mod_wo_bootstrap <- blasso(x, y, loops = 8, bootstrap = FALSE, ncores = 1)
expect_true(class(blasso_mod) == "LassoLoop")
expect_true(class(blasso_mod_wo_bootstrap) == "LassoLoop")
expect_true(blasso_mod@bootstraped)
expect_false(blasso_mod_wo_bootstrap@bootstraped)
expect_true(blasso_mod@family == "cox")
expect_true(blasso_mod_wo_bootstrap@family == "cox")
expect_true(blasso_mod@length == 10)
expect_true(blasso_mod_wo_bootstrap@length == 8)
expect_error(blasso(error_x, y, loops = 10, bootstrap = TRUE, ncores = 1))
expect_error(blasso(x, error_y, loops = 10, bootstrap = TRUE, ncores = 1))
blasso_mod@family
expect_false(blasso_mod@family == "cox")
expect_false(blasso_mod_wo_bootstrap@family == "cox")
mtcars
x <- mtcars[,1:7]
y <- mtcars$vs
error_x <- x[1:5,]
error_y <- mtcars[,8:9]
binom_blasso_mod <- binom_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
binom_blasso_mod_wo_bootstrap <- binom_blasso(x, y, loops = 8, bootstrap = FALSE, ncores = 1)
expect_true(class(binom_blasso_mod) == "LassoLoop")
expect_true(class(binom_blasso_mod_wo_bootstrap) == "LassoLoop")
expect_true(binom_blasso_mod@bootstraped)
expect_false(binom_blasso_mod_wo_bootstrap@bootstraped)
expect_true(binom_blasso_mod@family == "binomial")
expect_true(binom_blasso_mod_wo_bootstrap@family == "binomial")
expect_false(binom_blasso_mod@family == "cox")
expect_false(binom_blasso_mod_wo_bootstrap@family == "cox")
expect_true(binom_blasso_mod@length == 10)
expect_true(binom_blasso_mod_wo_bootstrap@length == 8)
expect_error(binom_blasso(error_x, y, loops = 10, bootstrap = TRUE, ncores = 1))
expect_error(binom_blasso(x, error_y, loops = 10, bootstrap = TRUE, ncores = 1))
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
covr::package_coverage()
expect_error(binom_blasso(error_x, y, loops = 10, bootstrap = TRUE, ncores = 1, smote = TRUE))
expect_error(binom_blasso(x, error_y, loops = 10, bootstrap = TRUE, ncores = 1, smote = TRUE))
s_binom_blasso_mod <- binom_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1, smote = TRUE)
x <- mtcars[,1:7]
y <- mtcars$vs
error_x <- x[1:5,]
error_y <- mtcars[,8:9]
binom_blasso_mod <- binom_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
binom_blasso_mod_wo_bootstrap <- binom_blasso(x, y, loops = 8, bootstrap = FALSE, ncores = 1)
s_binom_blasso_mod <- binom_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1, smote = TRUE)
s_binom_blasso_mod_wo_bootstrap <- binom_blasso(x, y, loops = 8, bootstrap = FALSE, ncores = 1, smote = TRUE)
expect_true(class(binom_blasso_mod) == "LassoLoop")
expect_true(class(binom_blasso_mod_wo_bootstrap) == "LassoLoop")
expect_true(class(s_binom_blasso_mod) == "LassoLoop")
expect_true(class(s_binom_blasso_mod_wo_bootstrap) == "LassoLoop")
expect_true(binom_blasso_mod@bootstraped)
expect_false(binom_blasso_mod_wo_bootstrap@bootstraped)
expect_true(s_binom_blasso_mod@bootstraped)
expect_false(s_binom_blasso_mod_wo_bootstrap@bootstraped)
expect_true(binom_blasso_mod@family == "binomial")
expect_true(binom_blasso_mod_wo_bootstrap@family == "binomial")
expect_true(s_binom_blasso_mod@family == "binomial")
expect_true(s_binom_blasso_mod_wo_bootstrap@family == "binomial")
expect_false(binom_blasso_mod@family == "cox")
expect_false(binom_blasso_mod_wo_bootstrap@family == "cox")
expect_false(s_binom_blasso_mod@family == "cox")
expect_false(s_binom_blasso_mod_wo_bootstrap@family == "cox")
expect_true(binom_blasso_mod@length == 10)
expect_true(binom_blasso_mod_wo_bootstrap@length == 8)
expect_true(s_binom_blasso_mod@length == 10)
expect_true(s_binom_blasso_mod_wo_bootstrap@length == 8)
expect_error(binom_blasso(error_x, y, loops = 10, bootstrap = TRUE, ncores = 1))
expect_error(binom_blasso(x, error_y, loops = 10, bootstrap = TRUE, ncores = 1))
expect_error(binom_blasso(error_x, y, loops = 10, bootstrap = TRUE, ncores = 1, smote = TRUE))
expect_error(binom_blasso(x, error_y, loops = 10, bootstrap = TRUE, ncores = 1, smote = TRUE))
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
covr::package_coverage()
pkgdown::build_site()
binom_blasso_mod <- binom_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
devtools::load_all()
binom_blasso_mod <- binom_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
x <- mtcars[,1:7]
y <- mtcars$vs
error_x <- x[1:5,]
error_y <- mtcars[,8:9]
binom_blasso_mod <- binom_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
warnings()
binom_blasso_mod
binom_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
data("survival_cancer")
x <- survival_cancer[,4:10]
x <- data.frame(apply(x, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- survival_cancer[,2:3] %>% mutate(status = ifelse(status == 2,1,0))
error_x <- x[1:10,]
error_y <- y[,1]
##
cox_mod <- cox_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
binom_blasso(x, y, loops = 8, bootstrap = FALSE, ncores = 1, smote = TRUE)
x <- mtcars[,1:7]
y <- mtcars$vs
error_x <- x[1:5,]
error_y <- mtcars[,8:9]
binom_blasso(x, y, loops = 8, bootstrap = FALSE, ncores = 1, smote = TRUE)
x <- mtcars[,1:7]
y <- mtcars$vs
error_x <- x[1:5,]
error_y <- mtcars[,8:9]
##
binom_blasso_mod <- binom_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
devtools::load_all()
data("mtcars")
x <- mtcars[,1:6]
y <- mtcars$qsec
error_x <- x[1:5,]
error_y <- mtcars[,6:7]
blasso_mod <- blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
warnings()
devtools::load_all()
data("survival_cancer")
x <- survival_cancer[,4:10]
x <- data.frame(apply(x, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- survival_cancer[,2:3] %>% mutate(status = ifelse(status == 2,1,0))
error_x <- x[1:10,]
error_y <- y[,1]
cox_mod <- cox_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
cox_mod
devtools::load_all()
cox_mod <- cox_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
devtools::load_all()
data("mtcars")
x <- mtcars[,1:7]
y <- mtcars$vs
error_x <- x[1:5,]
error_y <- mtcars[,8:9]
##
binom_blasso_mod <- binom_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
data("survival_cancer")
x <- survival_cancer[,4:10]
x <- data.frame(apply(x, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- survival_cancer[,2:3] %>% mutate(status = ifelse(status == 2,1,0))
error_x <- x[1:10,]
error_y <- y[,1]
##
cox_mod <- cox_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
data("mtcars")
x <- mtcars[,1:6]
y <- mtcars$qsec
error_x <- x[1:5,]
error_y <- mtcars[,6:7]
##
blasso_mod <- blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
data("mtcars")
x <- mtcars[,1:7]
y <- mtcars$vs
error_x <- x[1:5,]
error_y <- mtcars[,8:9]
##
binom_blasso_mod <- binom_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
warnings()
s_binom_blasso_mod <- binom_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1, smote = TRUE)
s_binom_blasso_mod
devtools::load_all()
devtools::document(รง)
devtools::document()
devtools::load_all()
devtools::document()
pkgdown::build_site()
usethis::use_data(mtcars)
?mtcars
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
covr::package_coverage()
pkgdown::build_site()
devtools::check()
?glmnet::cv.glmnet
object <- binom_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
object <- lassoloops::binom_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
data("mtcars")
x <- mtcars[,1:7]
y <- mtcars$vs
error_x <- x[1:5,]
error_y <- mtcars[,8:9]
object <- lassoloops::binom_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
warnings()
object@family
purrr::map(object@valiadationValues, 1) %>% which.max()
library(magrittr)
library(purrr)
purrr::map(object@valiadationValues, 1) %>% which.max()
purrr::map(object@valiadationValues, 1)
object@valiadationValues
class(object)
devtools::load_all()
purrr::map(object@valiadationValues, 1) %>% which.max()
object <- lassoloops::binom_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 1)
purrr::map(object@valiadationValues, 1) %>% which.max()
object@coefficients
object@valiadationMetric
loops = 2
bootstrap = TRUE
alpha = 1
nfolds = 10
foreach::foreach(i = 1:loops) %dopar% {
## BOOTSTRAP
if(isTRUE(bootstrap)){
idx <- sample(1:n, replace = T)
new_matrix <- cbind(y, x)
new_matrix <- new_matrix[idx ,]
} else{
new_matrix <- cbind(y, x)
}
## TEST
idx_test <- sample(1:n, 0.2*n, replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
## TRAIN
train <- new_matrix[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
## LASSO
cv_fit <- glmnet::cv.glmnet(data.matrix(train_x), as.matrix(train_y), alpha = alpha, family = "binomial", nfolds = nfolds)
tmp_coeffs <- coef(cv_fit, s = "lambda.min")
final_coef <- data.frame(name = tmp_coeffs@Dimnames[[1]][tmp_coeffs@i + 1], coefficient = tmp_coeffs@x)
lasso_pred <- predict(cv_fit, s = cv_fit$lambda.min, newx = data.matrix(test_x), type = "class")
cm <- caret::confusionMatrix(as.factor(lasso_pred), as.factor(test_y))
overall <- cm$overall
res[[i]] <- list(coeffs = final_coef, accuracy = overall, confusionMatrix = cm$table, model = cv_fit)
}
x <- mtcars[,1:7]
y <- mtcars$vs
seed = 987654321
ncores
ncores = 2
doParallel::registerDoParallel(cores = ncores)
set.seed(seed)
varx <- colnames(x)
rowx <- nrow(x)
nvar <- ncol(x)
n <- length(y)
res <- vector("list", loops)
if(rowx != n){
stop("The number of rows in x is not equal to the number of rows in y!")
}
smote = FALSE
if(isTRUE(smote)){
new_matrix <- cbind(y = as.character(as.factor(y)), x)
new_matrix <- performanceEstimation::smote(y ~ ., as.data.frame(new_matrix), perc.over = perc_over, perc.under = perc_under)
x <- new_matrix[,-1]
y <- new_matrix[,1]
n <- nrow(new_matrix)
}
foreach::foreach(i = 1:loops) %dopar% {
## BOOTSTRAP
if(isTRUE(bootstrap)){
idx <- sample(1:n, replace = T)
new_matrix <- cbind(y, x)
new_matrix <- new_matrix[idx ,]
} else{
new_matrix <- cbind(y, x)
}
## TEST
idx_test <- sample(1:n, 0.2*n, replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
## TRAIN
train <- new_matrix[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
## LASSO
cv_fit <- glmnet::cv.glmnet(data.matrix(train_x), as.matrix(train_y), alpha = alpha, family = "binomial", nfolds = nfolds)
tmp_coeffs <- coef(cv_fit, s = "lambda.min")
final_coef <- data.frame(name = tmp_coeffs@Dimnames[[1]][tmp_coeffs@i + 1], coefficient = tmp_coeffs@x)
lasso_pred <- predict(cv_fit, s = cv_fit$lambda.min, newx = data.matrix(test_x), type = "class")
cm <- caret::confusionMatrix(as.factor(lasso_pred), as.factor(test_y))
overall <- cm$overall
res[[i]] <- list(coeffs = final_coef, accuracy = overall, confusionMatrix = cm$table, model = cv_fit)
}
idx <- sample(1:n, replace = T)
new_matrix <- cbind(y, x)
new_matrix <- new_matrix[idx ,]
idx_test <- sample(1:n, 0.2*n, replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
train <- new_matrix[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
cv_fit <- glmnet::cv.glmnet(data.matrix(train_x), as.matrix(train_y), alpha = alpha, family = "binomial", nfolds = nfolds)
tmp_coeffs <- coef(cv_fit, s = "lambda.min")
final_coef <- data.frame(name = tmp_coeffs@Dimnames[[1]][tmp_coeffs@i + 1], coefficient = tmp_coeffs@x)
lasso_pred <- predict(cv_fit, s = cv_fit$lambda.min, newx = data.matrix(test_x), type = "class")
cm <- caret::confusionMatrix(as.factor(lasso_pred), as.factor(test_y))
list(coeffs = final_coef, accuracy = overall, confusionMatrix = cm$table, model = cv_fit)
overall <- cm$overall
list(coeffs = final_coef, accuracy = overall, confusionMatrix = cm$table, model = cv_fit)
res <- list(coeffs = final_coef, accuracy = overall, confusionMatrix = cm$table, model = cv_fit)
res <- new("LassoLoop",
model = purrr::map(res, 4),
bootstraped = bootstrap,
coefficients = purrr::map(res, 1),
family = "binomial",
valiadationMetric = "Accuracy",
valiadationValues = purrr::map(res, 2),
confusionMatrix = purrr::map(res, 3),
length = length(res))
res
res@model
res@bootstraped
res@coefficients
length(res)
res[[i]] <- list(coeffs = final_coef, accuracy = overall, confusionMatrix = cm$table, model = cv_fit)
res<- list(coeffs = final_coef, accuracy = overall, confusionMatrix = cm$table, model = cv_fit)
res$model
purrr::map(res, 4)
set.seed(seed)
varx <- colnames(x)
rowx <- nrow(x)
nvar <- ncol(x)
n <- length(y)
res <- vector("list", loops)
if(rowx != n){
stop("The number of rows in x is not equal to the number of rows in y!")
}
if(isTRUE(smote)){
new_matrix <- cbind(y = as.character(as.factor(y)), x)
new_matrix <- performanceEstimation::smote(y ~ ., as.data.frame(new_matrix), perc.over = perc_over, perc.under = perc_under)
x <- new_matrix[,-1]
y <- new_matrix[,1]
n <- nrow(new_matrix)
}
foreach::foreach(i = 1:loops) %dopar% {
## BOOTSTRAP
if(isTRUE(bootstrap)){
idx <- sample(1:n, replace = T)
new_matrix <- cbind(y, x)
new_matrix <- new_matrix[idx ,]
} else{
new_matrix <- cbind(y, x)
}
## TEST
idx_test <- sample(1:n, 0.2*n, replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
## TRAIN
train <- new_matrix[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
## LASSO
cv_fit <- glmnet::cv.glmnet(data.matrix(train_x), as.matrix(train_y), alpha = alpha, family = "binomial", nfolds = nfolds)
tmp_coeffs <- coef(cv_fit, s = "lambda.min")
final_coef <- data.frame(name = tmp_coeffs@Dimnames[[1]][tmp_coeffs@i + 1], coefficient = tmp_coeffs@x)
lasso_pred <- predict(cv_fit, s = cv_fit$lambda.min, newx = data.matrix(test_x), type = "class")
cm <- caret::confusionMatrix(as.factor(lasso_pred), as.factor(test_y))
overall <- cm$overall
res[[i]] <- list(coeffs = final_coef, accuracy = overall, confusionMatrix = cm$table, model = cv_fit)
}
purrr::map(res, 4)
res[[4]]
res[4]
res
tmp_coeffs
final_coef
lasso_pred
cm
overall
list(coeffs = final_coef, accuracy = overall, confusionMatrix = cm$table, model = cv_fit)
res[[1]]$model
res$model
View(res)
loop <- foreach::foreach(i = 1:loops) %dopar% {
## BOOTSTRAP
if(isTRUE(bootstrap)){
idx <- sample(1:n, replace = T)
new_matrix <- cbind(y, x)
new_matrix <- new_matrix[idx ,]
} else{
new_matrix <- cbind(y, x)
}
## TEST
idx_test <- sample(1:n, 0.2*n, replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
## TRAIN
train <- new_matrix[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
## LASSO
cv_fit <- glmnet::cv.glmnet(data.matrix(train_x), as.matrix(train_y), alpha = alpha, family = "binomial", nfolds = nfolds)
tmp_coeffs <- coef(cv_fit, s = "lambda.min")
final_coef <- data.frame(name = tmp_coeffs@Dimnames[[1]][tmp_coeffs@i + 1], coefficient = tmp_coeffs@x)
lasso_pred <- predict(cv_fit, s = cv_fit$lambda.min, newx = data.matrix(test_x), type = "class")
cm <- caret::confusionMatrix(as.factor(lasso_pred), as.factor(test_y))
overall <- cm$overall
res[[i]] <- list(coeffs = final_coef, accuracy = overall, confusionMatrix = cm$table, model = cv_fit)
}
loop
purrr::map(res, 4)
res <- foreach::foreach(i = 1:loops) %dopar% {
## BOOTSTRAP
if(isTRUE(bootstrap)){
idx <- sample(1:n, replace = T)
new_matrix <- cbind(y, x)
new_matrix <- new_matrix[idx ,]
} else{
new_matrix <- cbind(y, x)
}
## TEST
idx_test <- sample(1:n, 0.2*n, replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-1]
test_y <- test[,1]
## TRAIN
train <- new_matrix[-idx_test ,]
train_x <- train[,-1]
train_y <- train[,1]
## LASSO
cv_fit <- glmnet::cv.glmnet(data.matrix(train_x), as.matrix(train_y), alpha = alpha, family = "binomial", nfolds = nfolds)
tmp_coeffs <- coef(cv_fit, s = "lambda.min")
final_coef <- data.frame(name = tmp_coeffs@Dimnames[[1]][tmp_coeffs@i + 1], coefficient = tmp_coeffs@x)
lasso_pred <- predict(cv_fit, s = cv_fit$lambda.min, newx = data.matrix(test_x), type = "class")
cm <- caret::confusionMatrix(as.factor(lasso_pred), as.factor(test_y))
overall <- cm$overall
res[[i]] <- list(coeffs = final_coef, accuracy = overall, confusionMatrix = cm$table, model = cv_fit)
}
purrr::map(res, 4)
res <- new("LassoLoop",
model = purrr::map(res, 4),
bootstraped = bootstrap,
coefficients = purrr::map(res, 1),
family = "binomial",
valiadationMetric = "Accuracy",
valiadationValues = purrr::map(res, 2),
confusionMatrix = purrr::map(res, 3),
length = length(res))
class(res)
purrr::map(res, 2)
purrr::map(object@valiadationValues, 1) %>% which.max()
purrr::map(res@valiadationValues, 1) %>% which.max()
res
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
pkgdown::build_site()
covr::package_coverage()
