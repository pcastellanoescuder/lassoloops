new_matrix <- cbind(y, x)
idx_test <- sample(1:(n/1), replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-c(1:2)]
test_y <- test[,1:2]
train <- new_matrix[-idx_test ,]
train_x <- train[,-c(1:2)]
train_y <- train[,1:2]
View(train_y)
new_matrix <- cbind(y, x)
idx_test <- sample(1:(n/3), replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-c(1:2)]
test_y <- test[,1:2]
idx_test <- sample(1:(n/1), replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-c(1:2)]
test_y <- test[,1:2]
?POMA::PomaVolcano
?scale_fill_gradient
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::load_all()
# cox
x <- survival::cancer[,4:10]
x <- data.frame(apply(x, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- survival::cancer[,2:3] %>% mutate(status = ifelse(status == 2,1,0))
cox_mod <- cox_blasso(x, y, loops = 10)
devtools::load_all()
cox_mod <- cox_blasso(x, y, loops = 10)
cv.glmnet(x,y,family = "cox")
x <- survival::cancer[,4:10]
x <- data.frame(apply(x, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- survival::cancer[,2:3] %>% mutate(status = ifelse(status == 2,1,0))
cv.glmnet(x,y,family = "cox")
cv.glmnet(as.matrix(x),as.matrix(y),family = "cox")
a <- cv.glmnet(as.matrix(x),as.matrix(y),family = "cox")
View(a)
predict(y)
predict(a)
class(a)
devtools::load_all()
cox_mod <- cox_blasso(x, y, loops = 10)
cox_mod
cox_mod[[1]]
cox_mod[1]
cox_mod@model
cox_mod@model[[1]]
cox_mod@model[[1]]$glmnet.fit
res <- cox_blasso(x, y, loops = 10)
purrr::map(res, 1)
object <- cox_blasso(x, y, loops = 10)
object@family
purrr::map(object@valiadationValues, 1)
purrr::map(object@valiadationValues, 3)
cindex <- purrr::map(object@valiadationValues, 1) %>% which.max()
cindex
object@valiadationValues
Cindex <- object@valiadationValues[[cindex]]
Cindex
object@coefficients
coefficients <- object@coefficients[[cindex]]
coefficients
object@model
model <- object@model[[cindex]]
model
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
a <- cv.glmnet(as.matrix(x),as.matrix(y),family = "cox")
# cox
x <- survival::cancer[,4:10]
x <- data.frame(apply(x, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- survival::cancer[,2:3] %>% mutate(status = ifelse(status == 2,1,0))
a <- cv.glmnet(as.matrix(x), as.matrix(y), family = "cox", parallel = TRUE)
a$cvm
?glmnet::cv.coxnet
?glmnet::cv.glmnet
# cox
x <- survival::cancer[,4:10]
x <- data.frame(apply(x, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- survival::cancer[,2:3] %>% mutate(status = ifelse(status == 2,1,0))
cox_mod <- cox_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 4)
test_list <- pick_best(cox_mod)
test_list
test_list$model
test_list$cindex
test_list$coefficients
predict(test_list$model, newx = x)
predict(test_list$model, newx = x)
# cox
x <- survival::cancer[,4:10]
x <- data.frame(apply(x, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- survival::cancer[,2:3] %>% mutate(status = ifelse(status == 2,1,0))
idx_test <- sample(1:(n/3), replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-c(1:2)]
test_y <- test[,1:2]
## TRAIN
train <- new_matrix[-idx_test ,]
train_x <- train[,-c(1:2)]
train_y <- train[,1:2]
# cox
x <- survival::cancer[,4:10]
x <- data.frame(apply(x, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- survival::cancer[,2:3] %>% mutate(status = ifelse(status == 2,1,0))
idx_test <- sample(1:(n/3), replace = FALSE)
# cox
x <- survival::cancer[,4:10]
x <- data.frame(apply(x, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- survival::cancer[,2:3] %>% mutate(status = ifelse(status == 2,1,0))
n <- length(y)
idx_test <- sample(1:(n/3), replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-c(1:2)]
test_y <- test[,1:2]
train <- new_matrix[-idx_test ,]
# cox
x <- survival::cancer[,4:10]
x <- data.frame(apply(x, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- survival::cancer[,2:3] %>% mutate(status = ifelse(status == 2,1,0))
n <- length(y)
idx_test <- sample(1:(n/3), replace = FALSE)
test <- x[idx_test ,]
test_x <- test[,-c(1:2)]
test_y <- test[,1:2]
train <- x[-idx_test ,]
train_x <- train[,-c(1:2)]
train_y <- train[,1:2]
cox_mod <- cox_blasso(test_x, test_y, loops = 10, bootstrap = TRUE, ncores = 4)
test_y
test_x
# cox
x <- survival::cancer[,4:10]
x <- data.frame(apply(x, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- survival::cancer[,2:3] %>% mutate(status = ifelse(status == 2,1,0))
n <- length(y)
idx_test <- sample(1:(n/3), replace = FALSE)
test <- x[idx_test ,]
test_x <- test[,-c(1:2)]
test_y <- test[,1:2]
train <- x[-idx_test ,]
train_x <- train[,-c(1:2)]
train_y <- train[,1:2]
idx_test
n
# cox
x <- survival::cancer[,4:10]
x <- data.frame(apply(x, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- survival::cancer[,2:3] %>% mutate(status = ifelse(status == 2,1,0))
n <- nrow(y)
idx_test <- sample(1:(n/3), replace = FALSE)
test <- x[idx_test ,]
test_x <- test[,-c(1:2)]
test_y <- test[,1:2]
## TRAIN
train <- x[-idx_test ,]
train_x <- train[,-c(1:2)]
train_y <- train[,1:2]
cox_mod <- cox_blasso(test_x, test_y, loops = 10, bootstrap = TRUE, ncores = 4)
test_y
test_x
cox_mod <- cox_blasso(test_x, test_y, loops = 10, bootstrap = TRUE, ncores = 4)
cox_mod <- cox_blasso(as.matrix(test_x), as.matrix(test_y), loops = 10, bootstrap = TRUE, ncores = 4)
class(test_y)
y <- test_y
x <- test_x
varx <- colnames(x)
rowx <- nrow(x)
nvar <- ncol(x)
n <- nrow(y)
res <- vector("list", loops)
if(ncol(y) != 2){
stop("y must be a matrix with two columns (time and status)")
}
if(rowx != n){
stop("The number of rows in x is not equal to the number of rows in y!")
}
idx <- sample(1:n, replace = T)
new_matrix <- cbind(y, x)
new_matrix <- new_matrix[idx ,]
idx_test <- sample(1:(n/3), replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-c(1:2)]
test_y <- test[,1:2]
train <- new_matrix[-idx_test ,]
train_x <- train[,-c(1:2)]
train_y <- train[,1:2]
t
cv_fit <- glmnet::cv.glmnet(as.matrix(train_x), as.matrix(train_y), alpha = alpha, family = "cox", nfolds = nfolds, parallel = TRUE)
loops = 2
nfolds = 10
ncores = 2
cv_fit <- glmnet::cv.glmnet(as.matrix(train_x), as.matrix(train_y), alpha = alpha, family = "cox", nfolds = nfolds, parallel = TRUE)
as.matrix(train_x)
as.matrix(train_y)
alpha
alpha <- 1
cv_fit <- glmnet::cv.glmnet(as.matrix(train_x), as.matrix(train_y), alpha = alpha, family = "cox", nfolds = nfolds, parallel = TRUE)
x <- survival::cancer[,4:10]
x <- data.frame(apply(x, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- survival::cancer[,2:3] %>% mutate(status = ifelse(status == 2,1,0))
n <- nrow(y)
idx_test <- sample(1:(n/3), replace = FALSE)
test <- x[idx_test ,]
test_x <- test[,-c(1:2)]
test_y <- test[,1:2]
## TRAIN
train <- x[-idx_test ,]
train_x <- train[,-c(1:2)]
train_y <- train[,1:2]
cox_mod <- cox_blasso(as.matrix(test_x), as.matrix(test_y), loops = 10, bootstrap = TRUE, ncores = 4)
cox_mod <- cox_blasso(as.data.frame(test_x), as.data.frame(test_y), loops = 10, bootstrap = TRUE, ncores = 4)
x <- survival::cancer[,4:10]
x <- data.frame(apply(x, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- survival::cancer[,2:3] %>% mutate(status = ifelse(status == 2,1,0))
cox_mod <- cox_blasso(as.data.frame(test_x), as.data.frame(test_y), loops = 10, bootstrap = TRUE, ncores = 4)
cox_mod <- cox_blasso(x, y, loops = 10, bootstrap = TRUE, ncores = 4)
cv.glmnet(as.matrix(x), as.matrix(y))
cv.glmnet(as.matrix(x), as.matrix(y), family = "cox")
model <- cv.glmnet(as.matrix(x), as.matrix(y), family = "cox")
predict(model, newx = x)
predict(model, new_data = x)
predict(model, new_data = test_x)
predict(model, newx = test_x)
predict(model, newx = as.matrix(test_x))
predict(cv_fit, s = cv_fit$lambda.min, newx = as.matrix(test_x), type = "response") # hazards
predict(model, s = model$lambda.min, newx = as.matrix(test_x), type = "response") # hazards
model <- cv.glmnet(as.matrix(train_x), as.matrix(train_y), family = "cox")
library(tidyverse)
# cox
x <- survival::cancer[,4:10]
x <- data.frame(apply(x, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- survival::cancer[,2:3] %>% mutate(status = ifelse(status == 2,1,0))
n <- nrow(y)
idx_test <- sample(1:(n/3), replace = FALSE)
test <- x[idx_test ,]
test_x <- test[,-c(1:2)]
test_y <- test[,1:2]
## TRAIN
train <- x[-idx_test ,]
train_x <- train[,-c(1:2)]
train_y <- train[,1:2]
model <- cv.glmnet(as.matrix(train_x), as.matrix(train_y), family = "cox")
glmnet::cv.glmnet
model <- cv.glmnet(as.matrix(train_x), as.matrix(train_y), family = "cox")
as.matrix(train_y)
x <- survival::cancer[,4:10]
x <- data.frame(apply(x, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- survival::cancer[,2:3] %>% mutate(status = ifelse(status == 2,1,0))
y
n <- nrow(y)
idx_test <- sample(1:(n/3), replace = FALSE)
x <- survival::cancer[,4:10]
x <- data.frame(apply(x, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- survival::cancer[,2:3] %>% mutate(status = ifelse(status == 2,1,0))
n <- nrow(y)
new_matrix <- cbind(y, x)
idx_test <- sample(1:(n/3), replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-c(1:2)]
test_y <- test[,1:2]
## TRAIN
train <- new_matrix[-idx_test ,]
train_x <- train[,-c(1:2)]
train_y <- train[,1:2]
model <- cv.glmnet(as.matrix(train_x), as.matrix(train_y), family = "cox")
predict(model, s = model$lambda.min, newx = as.matrix(test_x), type = "response") # hazards
lasso_pred <- predict(model, s = model$lambda.min, newx = as.matrix(test_x), type = "response") # hazards
cindex <- survcomp::concordance.index(lasso_pred, surv.time = test_y[,1], surv.event = test_y[,2], method = "noether")
cindex <- survcomp::concordance.index(lasso_pred, surv.time = test_y[,1], surv.event = test_y[,2], method = "noether")$c.index
cindex
cox_mod <- cox_blasso(train_x, train_x, loops = 1, bootstrap = TRUE, ncores = 4)
cox_mod <- cox_blasso(train_x, train_y, loops = 1, bootstrap = TRUE, ncores = 4)
cox_mod <- cox_blasso(train_x, train_y, loops = 2, bootstrap = TRUE, ncores = 4)
cox_mod
pick_best(cox_mod)$model
cox_mod
class(cox_mod)
model <- pick_best(cox_mod)$model
lasso_pred <- predict(model, s = model$lambda.min, newx = as.matrix(test_x), type = "response") # hazards
x <- survival::cancer[,4:10]
x <- data.frame(apply(x, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- survival::cancer[,2:3] %>% mutate(status = ifelse(status == 2,1,0))
n <- nrow(y)
new_matrix <- cbind(y, x)
idx_test <- sample(1:(n/3), replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-c(1:2)]
test_y <- test[,1:2]
## TRAIN
train <- new_matrix[-idx_test ,]
train_x <- train[,-c(1:2)]
train_y <- train[,1:2]
# raw cv.glmnet
test_list <- list()
for (i in 1:20){
model <- cv.glmnet(as.matrix(train_x), as.matrix(train_y), family = "cox")
lasso_pred <- predict(model, s = model$lambda.min, newx = as.matrix(test_x), type = "response") # hazards
test_list[i] <- survcomp::concordance.index(lasso_pred, surv.time = test_y[,1], surv.event = test_y[,2], method = "noether")$c.index
}
# without bootstrap
test_list2 <- list()
for (i in 1:20){
cox_mod <- cox_blasso(train_x, train_y, loops = 100, bootstrap = FALSE, ncores = 4)
model <- pick_best(cox_mod)$model
lasso_pred <- predict(model, s = model$lambda.min, newx = as.matrix(test_x), type = "response") # hazards
test_list2[i] <- survcomp::concordance.index(lasso_pred, surv.time = test_y[,1], surv.event = test_y[,2], method = "noether")$c.index
}
# bootstrap and internal train/test
test_list3 <- list()
for (i in 1:20){
cox_mod <- cox_blasso(train_x, train_y, loops = 100, bootstrap = TRUE, ncores = 4)
model <- pick_best(cox_mod)$model
lasso_pred <- predict(model, s = model$lambda.min, newx = as.matrix(test_x), type = "response") # hazards
test_list3[i] <- survcomp::concordance.index(lasso_pred, surv.time = test_y[,1], surv.event = test_y[,2], method = "noether")$c.index
}
results <- data.frame(raw_glmnet = unlist(test_list),
wo_bootstrap = unlist(test_list2),
bootstrap = unlist(test_list3))
ggplot(reshape2::melt(results)) +
geom_boxplot(aes(variable, value, fill = variable)) +
theme_bw()
ggplot(reshape2::melt(results)) +
geom_density(aes(variable, value, fill = variable)) +
theme_bw()
ggplot(reshape2::melt(results)) +
geom_density(aes(value, fill = variable)) +
theme_bw()
View(results)
melt_res <- reshape2::melt(results)
View(melt_res)
ggplot(melt_res) +
geom_boxplot(aes(variable, value, fill = variable)) +
theme_bw()
mean(results$bootstrap)
mean(results$raw_glmnet)
results <- data.frame(raw_glmnet = unlist(test_list),
wo_bootstrap = unlist(test_list2),
bootstrap = unlist(test_list3))
save(results, file = "/Users/pol/Desktop/1_simulation_lassoloops.Rdata")
results[results$bootstrap > 0.6077601,]
max(results)
colnames(results[max(results)])
colnames(results[max(results),])
ggplot(melt_res) +
geom_boxplot(aes(variable, value, fill = variable)) +
geom_hline(yintercept = max(results)) +
theme_bw()
ggplot(melt_res) +
geom_boxplot(aes(variable, value, fill = variable)) +
geom_hline(yintercept = max(results), linetype = "dashed") +
theme_bw()
ggplot(melt_res) +
geom_boxplot(aes(variable, value, fill = variable)) +
geom_hline(yintercept = max(results), linetype = "dashed") +
geom_jitter() +
theme_bw()
ggplot(melt_res) +
geom_boxplot(aes(variable, value, fill = variable)) +
geom_hline(yintercept = max(results), linetype = "dashed") +
geom_jitter(aes(variable, value, fill = variable)) +
theme_bw()
ggplot(melt_res) +
geom_density(aes(value, color = variable)) +
theme_bw()
ggplot(melt_res) +
geom_boxplot(aes(variable, value, fill = variable)) +
geom_hline(yintercept = max(results), linetype = "dashed") +
geom_jitter(aes(variable, value, color = variable)) +
theme_bw()
ggplot(melt_res) +
geom_boxplot(aes(variable, value, fill = variable)) +
geom_hline(yintercept = max(results), linetype = "dashed") +
geom_jitter(aes(variable, value, fill = variable)) +
theme_bw()
survival::cancer[,2:3]
survival::cancer[,4:10]
t.test(results$raw_glmnet, results$bootstrap)
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
pkgdown::build_site()
devtools::load_all()
BiocManager::install("survcomp")
devtools::load_all()
install.packages("tictoc")
devtools::load_all()
library(tidyverse)
# cox
x <- survival::cancer[,4:10]
x <- data.frame(apply(x, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- survival::cancer[,2:3] %>% mutate(status = ifelse(status == 2,1,0))
n <- nrow(y)
new_matrix <- cbind(y, x)
idx_test <- sample(1:(n/3), replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-c(1:2)]
test_y <- test[,1:2]
## TRAIN
train <- new_matrix[-idx_test ,]
train_x <- train[,-c(1:2)]
train_y <- train[,1:2]
# raw cv.glmnet
test_list <- list()
for (i in 1:50){
model <- cv.glmnet(as.matrix(train_x), as.matrix(train_y), family = "cox", parallel = TRUE)
lasso_pred <- predict(model, s = model$lambda.min, newx = as.matrix(test_x), type = "response") # hazards
test_list[i] <- survcomp::concordance.index(lasso_pred, surv.time = test_y[,1], surv.event = test_y[,2], method = "noether")$c.index
}
# without bootstrap
test_list2 <- list()
for (i in 1:50){
cox_mod <- cox_blasso(train_x, train_y, loops = 300, bootstrap = FALSE, ncores = 12)
model <- pick_best(cox_mod)$model
lasso_pred <- predict(model, s = model$lambda.min, newx = as.matrix(test_x), type = "response") # hazards
test_list2[i] <- survcomp::concordance.index(lasso_pred, surv.time = test_y[,1], surv.event = test_y[,2], method = "noether")$c.index
}
# bootstrap and internal train/test
test_list3 <- list()
for (i in 1:50){
cox_mod <- cox_blasso(train_x, train_y, loops = 300, bootstrap = TRUE, ncores = 12)
model <- pick_best(cox_mod)$model
lasso_pred <- predict(model, s = model$lambda.min, newx = as.matrix(test_x), type = "response") # hazards
test_list3[i] <- survcomp::concordance.index(lasso_pred, surv.time = test_y[,1], surv.event = test_y[,2], method = "noether")$c.index
}
##
results <- data.frame(raw_glmnet = unlist(test_list),
wo_bootstrap = unlist(test_list2),
bootstrap = unlist(test_list3))
save(results, file = "/home/pol/Escritorio/2_simulation_lassoloops.Rdata")
##
melt_res <- reshape2::melt(results)
ggplot(melt_res) +
geom_boxplot(aes(variable, value, fill = variable)) +
geom_hline(yintercept = max(results), linetype = "dashed") +
geom_jitter(aes(variable, value, fill = variable)) +
theme_bw()
devtools::load_all()
library(tidyverse)
# cox
x <- survival::cancer[,4:10]
x <- data.frame(apply(x, 2, function(y)ifelse(is.na(y), median(y, na.rm = T), y)))
y <- survival::cancer[,2:3] %>% mutate(status = ifelse(status == 2,1,0))
n <- nrow(y)
new_matrix <- cbind(y, x)
idx_test <- sample(1:(n/3), replace = FALSE)
test <- new_matrix[idx_test ,]
test_x <- test[,-c(1:2)]
test_y <- test[,1:2]
## TRAIN
train <- new_matrix[-idx_test ,]
train_x <- train[,-c(1:2)]
train_y <- train[,1:2]
# raw cv.glmnet
test_list <- list()
for (i in 1:50){
model <- cv.glmnet(as.matrix(train_x), as.matrix(train_y), family = "cox", parallel = TRUE)
lasso_pred <- predict(model, s = model$lambda.min, newx = as.matrix(test_x), type = "response") # hazards
test_list[i] <- survcomp::concordance.index(lasso_pred, surv.time = test_y[,1], surv.event = test_y[,2], method = "noether")$c.index
}
# without bootstrap
test_list2 <- list()
for (i in 1:50){
cox_mod <- cox_blasso(train_x, train_y, loops = 300, bootstrap = FALSE, ncores = 12)
model <- pick_best(cox_mod)$model
lasso_pred <- predict(model, s = model$lambda.min, newx = as.matrix(test_x), type = "response") # hazards
test_list2[i] <- survcomp::concordance.index(lasso_pred, surv.time = test_y[,1], surv.event = test_y[,2], method = "noether")$c.index
}
# bootstrap and internal train/test
test_list3 <- list()
for (i in 1:50){
cox_mod <- cox_blasso(train_x, train_y, loops = 300, bootstrap = TRUE, ncores = 12)
model <- pick_best(cox_mod)$model
lasso_pred <- predict(model, s = model$lambda.min, newx = as.matrix(test_x), type = "response") # hazards
test_list3[i] <- survcomp::concordance.index(lasso_pred, surv.time = test_y[,1], surv.event = test_y[,2], method = "noether")$c.index
}
##
results <- data.frame(raw_glmnet = unlist(test_list),
wo_bootstrap = unlist(test_list2),
bootstrap = unlist(test_list3))
save(results, file = "/home/pol/Escritorio/2_simulation_lassoloops.Rdata")
##
melt_res <- reshape2::melt(results)
ggplot(melt_res) +
geom_boxplot(aes(variable, value, fill = variable)) +
geom_hline(yintercept = max(results), linetype = "dashed") +
geom_jitter(aes(variable, value, fill = variable)) +
theme_bw()
View(results)
View(results)
10/50
